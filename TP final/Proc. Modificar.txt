

Procedimiento modModelo (E/S modelos: listaModelos )
{Modifica los datos de un modelo.
PRE: m = M
POST: M = M' y M' tiene un nodo modificado}
EXC -}

Var
	mod: entero
	info: infoModelo
	opc: logico
	
Inicio 
	Repetir
		pedirCod(mod, modelos)					
		recuClave(modelos, mod, info)
		Mostrar("El modelo a modificar es: ", info.nomMod "¿Es correcto? V/F")
		Ingresar(opc)
	Hasta que (opc=V) o (opc=v)
	
	Mostrar ("Ingrese el nuevo nombre del modelo")
	Ingresar(info.nomMod)
	
	suprimir(modelos, mod)			//se elimina el modelo de la lista, y se vuelve a insertar, con solo el nombre modificado 
	Insertar(modelos, mod, info)
	
Excepciones
	cuando listaLlena => Mostrar ("Error en lista de modelos")
Fin


Procedimiento modEtapas(E/S modelos: listaModelos )
{Modifica una etapa de mantenimiento de un modelo. 
PRE: m = M
POST: M = M' y el modelo x de M tiene modificado su calentario de etapas
EXC -}

VAR
	mod: entero
	kEtapa: entero 			//clave de mantenimiento, cantidad de kilometros requeridos para la etapa
	pEtapa: real			//precio de la etapa
	codValido: logico
	i: infoModelos
	
Inicio
	codValido <- falso
	pedirCod(mod, modelos)			//se obtiene el modelo para modifiacar sus etapas
	
	recuClave(modelos, mod, i)		//No puede tirar claveNoExiste porque el modelo fue verificado antes
	
	
	//Esto se puede volver a modularizar 
	
	Si no(esVacia(i.calendario)) entonces
		Repetir												//Este bucle hay que modificarlo porque no tiene salida en caso de datos incorrectos
			Mostrar("Ingrese etapa a modificar")
			Ingresar(kEtapa)
			Inicio
				recuClave(i.calendario, kEtapa, pEtapa)			//recupera el nodo correspondiente a la etapa ingresada
				codValido <- v
			Excepciones
				cuando claveNoExiste => 
					mostrar ("Etapa no existe")
					codValido<- falso
			Fin	
		Hasta que codValido
		
		
		suprimir(i.calendario, kEtapa)								//se elimina el nodo de mantenimiento, y se piden los nuevos datos 
		pedirKMS(kEtapa, MIN_KMS)
		pedirPrecio(pEtapa, MIM_PRECIO)
		Insertar(i.calendario, kEtapa, pEtapa)
	Sino 	
		Mostrar("La lista de mantenimientos esta vacia")
	FinSi
Excepciones
	cuando listaLlena => Mostrar ("Error en lista de mantenimientos")
Fin



Procedimiento modClientes(E/S clientes: arbolClientes)
{Modifca los datos de un cliente
PRE: c = C 
POST: C = C' y C' tiene un cliente modificado
EXC -}

VAR	
	DNI: entero 
	infoC: infoCliente
	opc: entero 
	salida: logico
	OK: logico

Inicio
	OK<- falso 
	repetir 
		Inicio
			Mostrar("Ingrese el DNI del Cliente a modificar")		//se podria verificar con el pedirDNI, pero no es posible porque menciona estrictamente "Cliente nuevo"
			Ingresar(DNI)
			buscar(clientes, DNI, infoC)
			OK<- verdadero
		Excepciones
			claveNoExiste => Mostrar ("Cliente no existe")
			OK<- falso
		Fin		
	repetir hasta OK
	
	
	salida <- falso
	Repetir
		menuModifCliente()
		opc <- enteroEnRango("Ingrese su opción", 1, 5)
		
		Segun opc hacer
			1: pedirNombre(infoC.nombre, infoC.apellido)
			
			2: pedirTel(infoC.tel)
			
			3: pedirEmail(infoC.email)
			
			4: modifVehiculos(infoC.vehiculos)
			
			5: salida <- verdadero	
		FinSegun
		
		insertar(clientes, DNI, infoC)
	hasta salida
Fin

Procedimiento menuModifCliente()
Inicio	
	mostrar("Que desea modificar? ")
	mostrar("----------------------")
	mostrar("1. Nombre y Apellido")
	mostrar("2. Telefono de contacto")
	mostrar("3. Email")
	mostrar("4. Listado de Vehiculos")
	mostrar("5. Salir")
Fin

Procedimiento modifVehiculo(E/S lVehiculos: listaVehiculo)
{Modifica el listado de vehiculos de un cliente
PRE: l =L 
POST: L = L' y L' tiene un nodo modificado}
EXC -}

VAR
	pat: cadena
	i: logico 				//el vehiculo recibio o no algun mantenimiento
	
Inicio
	Si no(esVacia(lVehiculos)) entonces					//En caso de que el cliente sea nuevo y aun no se hallan cargado sus vehiculos 
		Mostrar ("Ingrese la patente del vehiculo a modificar")
		pat<- obtenerPatente
		
		Inicio	
			recuClave(lVehiculos, pat, i)
			Suprimir(lVehiculos, pat)
			Mostrar("Ingrese nuevo estado de mantenimiento del auto")
			Mostrar ("Verdadero si tiene algun mantenimiento, o Falso si no tiene mantenimientos")
			Ingresar(i)
			
			insertar(lVehiculos, pat, i)
		Excepciones	
			cuando claveNoExiste => Mostrar("La patente ", pat " no corresponde al cliente.")
	Sino
		Mostrar("El cliente no tiene vehiculos registrados")
	FinSi
Fin


Procedimiento modVehiculos(E/S vehiculos: arbolVehiculos, E clientes: arbolClientes, E modelos: listaModelos)
{MOdifica los datos de un vehiculo 
PRE: v = V. c = C. m = M.
POST: V = V' y V' tiene un nodo modificado
EXC -}
VAR
	auto: cadena 		//tipoclave del arbol de vehiculos, patente
	datos: infoVehiculos
	
Inicio
	Mostrar("Ingrese patente del vehiculo a modificar")
	auto<- obtenerPatente()
	
	Inicio
		buscar(vehiculos, auto, datos)			//localiza la patente del vehiculo a modificar
		repetir 
			menuModifVehiculo()
			opc <- enteroEnRango("Ingrese su opción", 1, 5 )

			//Se usan los modulos de ingreso de datos para validar, pero habria que modificar las cadenas que se
			//muestran para que sea algo generico y no mencione "cliente nuevo"
			
			Segun sea opc hacer	
				1: auto <- obtenerPatente()				//A REVISAR
				2: pedirAnio(datos.año, MAX_ANIO)
				3: pedirCod(datos.mod, modelos)
				4: pedirDNI(clientes, DNI)
				5: salida <- verdadero
			Fin
			insertar(vehiculos, auto, datos)
		hasta que salida
	Excepciones
		cuando claveNoExiste => Mostrar("La patente ingresada no existe")
	Fin
Fin

Procedimiento menuModifVehiculo()
Inicio
	mostrar("Que desea modificar? ")
	mostrar("----------------------")
	mostrar("1. Patente")
	mostrar("2. Año de Fabricacion")
	mostrar("3. Codigo de Automovil")
	mostrar("4. DNI Dueño")
	mostrar("5. Salir")
Fin
	
Procedimiento modServicios(E/S vehiculos: arbolVehiculos)
{Modifica los servicios realizados sobre un vehiculo
PRE: v = V.
POST: V = V', y V' tiene un servicio modificado}
EXC -}

VAR	
	salida: logico
	opc: entero
	info: infoVehiculos
	pat: cadena
	etapa: entero					//tipoClave listaMant
	iServicio: infoListaMant
	
	
Inicio
	Mostrar("ingrese patente del auto cuyos servicios desea modificar")
	pat <- obtenerPatente()
	
	Inicio
		buscar(vehiculos, pat, info)				//Si tira claveNoExiste es porque el auto no existe
		repetir 
			Si no(esVacia(info.mantenimientos))			//tiene mantenimiento realizado
				Mostrar("ingrese etapa de servicio a modificar")
				ingresar(etapa)
				
				inicio
					recuClave(info.mantenimientos, etapa, iServicio)			//verifica si esta registrada la etapa
					Suprimir(info.mantenimientos, etapa)						//se elimina ahora, para no tener problemas al modificar y re-insertar 
					
					menuModifServicio()
					opc <- enteroEnRango("Ingrese su opción", 1, 6)
						
					segun opc hacer 
						1: pedirEtapa(etapa, modelos, info.mod)
						2: pedirKmsReal(iServicio.kmReal, MIN_KMS)
						3: iServicio.fecha <- obtenerFecha
						4: pedirObs(iServicio.obs)
						5: pedirPrecio(iServicio.precio, MIM_PRECIO)
						6: salida()
					FinSegun
					
					Insertar(info.mantenimientos, etapa, iServicio)
					
				Excepciones
					cuando claveNoExiste Mostrar("etapa no existe")
			Sino
				mostrar("El vehiculo no tiene servicios realizados")
			FinSi
		hasta salida
		
	Excepciones
		cuando claveNoExiste => Mostrar("auto no existe")
Fin	


Procedimiento menuModifServicio()
{Menu para modificar informacion de un servicio realizado}

Inicio
	mostrar("Que desea modificar? ")
	mostrar("----------------------")
	mostrar("1. Etapa")
	mostrar("2. Kilometraje real del Vehhiculo")
	mostrar("3. Fecha en que se realizo el servicio")
	mostrar("4. Observaciones del servicio")
	mostrar("5. Precio del servicio")
	mostrar("6. Salir")
Fin
	
	


















