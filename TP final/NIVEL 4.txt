/*NIVEL 4*/

Procedimiento pedirCod(S cod: entero, E modelos: listaModelos, S i: infoModelos)
{Ingresa y valida un código de modelo
PRE: modelos = M
POS: cod = C, i = I.
C es un código de modelo válido
I es su info
Excepciones: salir}
VAR
	OK: logico

INICIO

	Repetir
		Mostrar("Ingrese el código de modelo")
		ingresar(cod)
		INICIO
			recuClave(modelos, cod, i) //ADT LO
			OK <- V
		Excepciones
			cuando claveNoExiste => OK <- ingresoIncorrecto("Código no existe")
		FIN
	Hasta que (OK)

FIN


Procedimiento pedirKmsEtapaNueva(S kms: entero, E i:infoModelos)
{Ingresa y valida un valor de kilometraje para una etapa de mantenimiento
PRE: i = I. I es la info del modelo
POS: kms = K. K es un valor de kilometraje válido para una etapa de mantenimiento
Excepciones: salir}
VAR
	precio: real
INICIO

	Repetir
		Mostrar("Ingrese kilometraje de la etapa")
		Ingresar(kms)
		INICIO
			recuClave(i.calendario, kms, precio) //ADT LO
			OK <- ingresoIncorrecto("Etapa ya existe")
		Excepciones
			cuando claveNoExiste => OK <- V
		FIN		
	Hasta que (OK)
	
FIN


Procedimiento pedirPrecio(S precio: real, E tope: real)
{Ingresa y valida un precio
PRE: tope = T
POS: precio = P. P es un valor de precio válido
Excepciones: salir}

VAR
	OK: logico
	
INICIO

	Repetir
		Mostrar("Ingrese precio del servicio")
		Ingresar(precio)
		
		Si (precio < tope) entonces
			OK <- ingresoIncorrecto("Precio incorrecto")
		Si no
			OK <- V
		Fin Si
	Hasta que (OK)
	
FIN


Procedimiento pedirDNI (E clientes: arbolClientes, S DNI: entero)
{Ingresa y valida un DNI
PRE: clientes = C
POS: DNI = D. D es un documento registrado en el ABB
Excepciones: salir}

VAR
	i: infoClientes
	OK: logico
	
INICIO

	Repetir
		Mostrar("Ingrese el DNI del cliente")
		ingresar(DNI)
		INICIO
			recuClave(clientes, DNI, i) //ADT LO
			OK <- ingresoIncorrecto("Cliente ya existe")
		Excepciones
			cuando claveNoExiste => OK <- V
		FIN
	Hasta que (OK) y (DNI >= 0)
	
FIN



Procedimiento pedirNombre (S nombre, apellido: cadena)
{Ingresa un nombre y apellido
PRE: -
POS: nombre = N, apellido = A
Excepciones:-}

INICIO

	Mostrar("Ingrese nombre del cliente nuevo")
	ingresar(nombre)
	Mostrar("Ingrese apellido del cliente nuevo")
	ingresar(apellido)
	
FIN



Procedimiento pedirTel (S tel: entero)
{Ingresa y valida un número de teléfono
PRE:
POS: tel = T. T es un número de teléfono válido
Excepciones: salir}

	OK: logico
INICIO

	Repetir
		Mostrar ("Ingrese número de teléfono celular del cliente nuevo")
		ingresar(tel)
		
		Si(i.tel < MIN_TEL) entonces
			OK <- ingresoIncorrecto("Número incorrecto")
		Si no
			OK <- V
		Fin Si
	Hasta OK
	
FIN



Procedimiento pedirEmail (S email: cadena)
{Ingresa una dirección de email
PRE: -
POS: email = E. E tiene una dirección de email
Excepciones: -}

INICIO

	Mostrar("Ingrese email del cliente nuevo")
	ingresar(email)
	
FIN



Procedimiento pedirPatente(E vehiculos: arbolVehiculos, S pat: cadena)
{Ingresa y valida una patente nueva
PRE: vehiculos: V
POS: pat = P
P es una patente nueva para vehiculos.
Excepciones: salir}

VAR
	OK: logico
	i: infoVehiculos
INICIO

	Repetir
		pat <- obtenerPatente()
		INICIO
			buscar(vehiculos, pat, i) //ADT ABB
			OK <- ingresoIncorrecto("Patente ya existe")
		Excepciones
			cuando claveNoExiste => OK <- V
		FIN
	Hasta que OK
	
FIN



Procedimiento pedirAnio (S anio: entero, E min: entero)
{Ingresa y valida un año
PRE: tope = T
POS: anio = A. A es un año válido
Excepciones: salir}
VAR
	OK: logico
INICIO
	
	Repetir
		Mostrar ("ingrese año de fabricacion")
		Ingresar (anio)
		Si (anio > min) entonces
			OK <- ingresoIncorrecto("Año incorrecto")
		Si no
			OK <- V
		Fin Si
	Hasta que OK

FIN



Procedimiento buscarDueño(E clientes: arbolClientes, S iClien: infoClientes)
{Ingresa un DNI y verifica si el cliente está registrado
PRE: clientes = C
POS: iClien = I, DNI = D. I tiene la info de un cliente registrado. D es el DNI de un cliente registrado.
Excepciones: salir}

VAR
	OK: logico
	DNI: entero
INICIO

	Repetir
		Mostrar("Ingrese DNI del dueño del vehículo")
		Ingresar(DNI)
		INICIO
			buscar(clientes, DNI, iClien) //Si el cliente no está registrado tira claveNoExiste //ADT ABB
			OK <- V
		Excepciones
			cuando claveNoExiste => OK <- ingresoIncorrecto("Cliente no registrado")
		FIN
	Hasta que OK
		
FIN


Procedimiento buscarVehiculo(E vehiculos: arbolVehiculos, E lista: listaVehiculos, S iVehi: infoVehiculos, S pat: cadena)
{Ingresa una patente y verifica si el vehiculo está registrado y si lo tiene registrado su dueño
PRE: vehiculos = V, lista = L. L tiene la lista de vehículos de un cliente
POS: iVehi = I. I tiene la info de un vehículo registrado
pat = P. P tiene una patente válida
Excepciones: salir}

VAR
	infoListaVehi: logico
	
INICIO
	Repetir
		Mostrar("Ingrese patente del vehículo a realizar servicio")
		pat <- obtenerPatente()
		INICIO
			buscar(vehiculos, pat, iVehi) //Si la patente no está registrada, tira claveNoExiste //ADT ABB
			recuClave(lista, pat, infoListaVehi) //Si el vehículo no está registrado bajo el dueño ingresado, tira claveNoExiste //ADT LO
			OK <- V
		Excepciones
			cuando claveNoExiste => OK <- ingresoIncorrecto("Patente no registrada")
		FIN
	Hasta que OK
	
FIN

Procedimiento pedirKmsReal(S kms: entero, E min: entero)
{Ingresa y valida un kilometraje real de un vehículo
PRE: min = M, M es el valor mínimo que puede tener el vehículo para realizar un mantenimiento
POS: kms = K. K >= M
Excepciones: salir}

VAR
	OK : logico
INICIO
	Repetir
		Mostrar("Ingrese kilometraje real del vehículo")
		Ingresar (kms)
		
		Si (kms >= min) entonces
			OK <- V
		Si no
			OK <- ingresoIncorrecto("Kilometraje incorrecto")
		Fin Si
	Hasta que OK
FIN


Procedimiento ingresarEtapa (E modelos: listaModelos, E iVehi: infoVehiculos, S j: infoListaMant, S etapa: entero)
{Ingresa una etapa de servicio de un vehículo registrado
PRE: modelos = M, codMod = C. C es el código de modelo del vehículo
POS: j = J, etapa = E.
J tiene la info de un servicio
E es una etapa de mantenimiento
Excepciones:  salir}
VAR
	OK: logico
	
	
	
	infoMod: infoModelos
	primEtapa: entero
	iEtapa: real
	
INICIO
	recuClave(modelos, iVehi.mod, infoMod) //ADT LO
	recuPrim(infoMod.calendario, primEtapa)		//Recuperamos la primer etapa de mantenimiento del modelo del vehiculo //ADT LO
	pedirKmsReal(j.kmReal, primEtapa)		//NIVEL 4
	
	Repetir
		pedirEtapa(etapa, iEtapa modelos, codMod)		//NIVEL 5??
		Si (j.kmReal < etapa) entonces
			OK <- ingresoIncorrecto("La etapa de mantenimiento no corresponde con el kilometraje del vehículo")
		Si no
			OK <- V
		Fin Si
	Hasta que OK
	
	//primero pedir el kilometraje, y despues la etapa
	//si la etapa es menor al kilometraje, incorrecto
	
	
	
	
	j.fecha <- obtenerFecha()
	
	pedirObs(j.obs)					//NIVEL 5??
	
	pedirPrecio(j.precio, iEtapa)	//NIVEL 4
	
FIN


Procedimiento pedirEtapa (S etapa: entero, S iEtapa: real E modelos: listaModelos, E codMod: entero)
{Ingresa y válida una etapa de servicio de un vehículo
PRE: modelos = M, codMod = C
POS: etapa = E, iEtapa = I.
E corresponde a una etapa de servicio del modelo de código C
I es la info de la etapa

VAR
	iEtapa: real
	iMod: infoModelos
	OK: logico
	
	
INICIO
	
	Repetir
		Mostrar("Ingrese etapa de servicio")
		Ingresar(etapa)
		
		INICIO
			recuClave(modelos, codMod , iMod) //Sabemos que el modelo está registrado, no tira claveNoExiste		
			recuClave(iMod.calendario, etapa, iEtapa) //Si la etapa no está registrada para el modelo ingresado, tira claveNoExiste
			OK <- V
		Excepciones
			cuando claveNoExiste => OK <- ingresoIncorrecto("Etapa no registrada")
		FIN
	Hasta que OK
	
FIN

Procedimiento pedirObs(S obs: cadena)
{Ingresa una observación
PRE: -
POS: obs = O
Excepciones: -}

INICIO
	Mostrar("Ingrese las observaciones del servicio")
	Ingresar(obs)
FIN



Procedimiento vaciarListaVehiculos (E/S lista: listaVehiculos, E/S vehiculos: arbolVehiculos)
{Elimina los vehículos de la lista de vehículos de un cliente y del ABB de vehículos
PRE: lista: L, vehiculos = V
POS: lista = L1, vehiculos = V1. L1 está vacía. V1 no tiene los elementos de L
Excepciones:		}

VAR
	k, aux: cadena
	OK, i: logico
INICIO
	OK <- V
	recuPrim(lista, k)
	Mientras OK hacer
	INICIO
		recuClave(lista, k, i)
		aux <- k
		recuSig(lista,k,k)
		INICIO
			suprimirVehiculo(vehiculos, aux)
			suprimir(lista, aux)
		Excepciones
			cuando claveNoExiste => nada
			//No tendría que tirar claveNoExiste porque
			se supone que el vehículo se cargó tanto 
			en el ABB como en la lista del cliente
		FIN
		
	Excepciones
		cuando claveEsUltima => OK <- F
								suprimirVehiculo(vehiculos, aux)
								suprimir(lista, aux)
	FIN
	
FIN



Procedimiento eliminaVehiculosModelo (E/S clientes: arbolClientes, E/S vehiculos: arbolVehiculos, E cod)
{Elimina todos los vehiculos de un modelo
PRE: clientes = C, vehiculos = V, cod = M
POS: clientes = C1, vehiculos = V1. V1 no tiene los vehiculos de modelo de código M. Los clientes de C1 no tienen vehículos de modelo de código M en sus listas de vehículos
Excepciones: salir}

VAR
	qVehiculos: colaVehiculos
	qClientes: colaClientes
	pat: cadena
	k: entero
	i: infoVehiculos
	j: infoClientes
INICIO
	crear(qVehiculos)
	inOrder(vehiculos, qVehiculos)
	
	Mientras no(esVacia(qVehiculos)) hacer
		frente(qVehiculos, pat)
		desencolar(qVehiculos)
		buscar(vehiculos, pat, i)
		Si (i.mod = cod) entonces
		INICIO
		//Si encuentra un vehículo del modelo que se quiere eliminar, primero lo elimina 
		//de la lista de vehículos de su dueño y después del arbol
			buscar(clientes, i.dueño, j)
			suprimir(j.vehiculos, pat)
			suprimirVehiculo(vehiculos, k)
		Excepciones
			cuando claveNoExiste => nada
			//no tendría que suceder
		Fin Si
	Fin Mientras
Excepciones
	cuando errorEnCola => lanzar salir
FIN



Procedimiento suprimirVehiculo (E/S vehiculos: arbolVehiculos, E k: entero)
{Suprime un vehículo
PRE: vehiculos = V, k = K
POS: vehiculos = V1. V1 no tiene el elemento de clave K
Excepciones:		}

VAR
	i: infoVehiculos
	
INICIO
	buscar(vehiculos, k, i)
	vaciar(i.mantenimientos)
	suprimir(vehiculos, k)
Excepciones
	cuando claveNoExiste => nada
	//No tendría que suceder
FIN




Procedimiento eliminarServiciosEtapa(E/S vehiculos: arbolVehiculos, E cod, etapa: entero)
{Elimina los servicios de una etapa en los vehículo de un modelo
PRE: vehiculos = V, cod = C, etapa = E
POS: vehiculos = V1. Los vehículos de V1 no tiene registrado el servicio de la etapa E
Excepciones: salir}

VAR
	qVehiculos: colaVehiculos
	k: entero
	i: infoVehiculos
INICIO
	crear(qVehiculos)
	inOrder(vehiculos, qVehiculos)
	
	Mientras no(esVacia(qVehiculos)) hacer
		frente(qVehiculos, k)
		desencolar(qVehiculos)
		
		buscar(vehiculos, k, i)
		Si (i.mod = cod) entonces
			INICIO
				suprimir(i.mantenimientos, etapa)
			Excepciones
				cuando claveNoExiste => nada
				//Puede ser que el vehículo no tenga el servicio de esa etapa realizado
			FIN
		Fin Si
	Fin Mientras
Excepciones
	cuando errorEnCola => lanzar salir
FIN



Procedimiento menuModifCliente()
Inicio	
	mostrar("Que desea modificar? ")
	mostrar("----------------------")
	mostrar("1. Nombre y Apellido")
	mostrar("2. Telefono de contacto")
	mostrar("3. Email")
	mostrar("4. Listado de Vehiculos")
	mostrar("5. Salir")
Fin





Procedimiento menuModifVehiculo()
INICIO
	mostrar("¿Qué desea modificar? ")
	mostrar("----------------------")
	mostrar("1. Patente")
	mostrar("2. Año de Fabricación")
	mostrar("3. Código de modelo")
	mostrar("4. DNI Dueño")
	mostrar("5. Salir")
FIN




Procedimiento menuModifServicio()
{Menu para modificar informacion de un servicio realizado}

Inicio
	mostrar("¿Qué desea modificar? ")
	mostrar("----------------------")
	mostrar("1. Etapa")
	mostrar("2. Kilometraje real del vehículo")
	mostrar("3. Fecha en que se realizó el servicio")
	mostrar("4. Observaciones del servicio")
	mostrar("5. Precio final del servicio")
	mostrar("6. Salir")
Fin










Procedimiento mostrarMant (E pat: cadena, E infoVehi: infoVehiculos)
{Muestra los mantenimientos de un vehículo
PRE: pat = P, infoVehi = I. I es la info del vehículo de patente P
POS: -
Excepciones: }

VAR
	k: entero
	infoLM: infoListaMant
	OK: logico
	
INICIO
	OK <- V

	recuPrim(infoVehi.mantenimientos, k)
	
	Mientras OK hacer
		recuClave(infoVehi.mantenimientos, k, infoLM)
		Mostrar("Patente del vehículo: ", pat)
		Mostrar("Etapa de mantenimiento: ", k," kilómetros")
		Mostrar("Kilometraje real: ", infoLM.kmReal)
		Mostrar("Fecha de realización de servicio: ", infoLM.fecha)
		Mostrar("Observaciones hechas: ", infoLM.obs)
		Mostrar("Precio final: ", infoLM.precio)
		
		INICIO
			recuSig(infoVehi.mantenimientos,k,k)
		Excepciones
			cuando claveEsUltima => OK <- F
		FIN
	Fin Mientras
	
Excepciones
	cuando listaVacia => Mostrar("No se registró ningún mantenimiento sobre el vehículo de patente ", pat)
FIN



Funcion tieneMant(E i: infoCliente): logico
{Verifica si el cliente reaizó mantenimientos en todos sus vehículos
PRE: i = I. I es la info del cliente
POS: tieneMant <- V ó F. Será V cuando todos sus vehículos tengan algún servicio realizado
Excepciones: }

VAR
	pat: cadena
	OK, info: logico
	//la info de la lista de vehiculos del cliente indica
	//si tiene al menos un servicio realizado
INICIO

	OK <- V
	recuPrim(i.vehiculos)
	
	Mientras OK hacer
		recuClave(i.vehiculos, pat, info)
		Si no(info) entonces
			OK <- F
		Fin Si
		INICIO
			recuSig(i.vehiculos,pat,pat)
		Excepciones
			cuando claveEsUltima => OK <- F
		FIN
	Fin Mientras
	
	tieneMant <- info //Si fueron todas V (si todos los vehículos tienen al menos un servicio realizado), la función devuelve V.
	//Si se encontró un vehículo sin mantenimientos, devuelve F
	
Excepciones
	cuando listaVacia => tieneMant <- F
FIN

