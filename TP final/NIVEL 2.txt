/*NIVEL 2*/



Procedimiento altaModelo (modelos: listaModelos)
{QH: Añade un nuevo modelo.
PRE: modelos = M
POST: modelos = M' y M' tiene un nuevo modelo.
Excepciones: -}

VAR
	i: infoModelos			//tipo Info de MODELOS
	k: entero			//tipo clave de MODELOS
	
INICIO

	pedirDatosAltaModelo(i, k)
	
	insertar(modelos, k, i)
	
	
Excepciones
	cuando listaLlena => Mostrar ("Error al ingresar modelo nuevo")
	
FIN




Procedimiento altaEtapas(E/S modelos: listaModelos)
{Agrega una etapa de mantenimiento en el calendario de un modelo
PRE: modelos = M
POS: modelos = M1, el nodo i de M1 tiene una etapa de mantenimiento nueva
Excepciones:		}
VAR
	cod: entero
	kms: entero
	precio: real
	i: infoModelos
	
INICIO

	pedirDatosAltaEtapas(cod, kms, precio, i) //Se ingresan el cod de modelo a modificar la etapa, los km de la etapa y el precio. Verifica cada uno
		
	insertar(i.calendario, kms, precio)	   //insertamos la etapa de mant en su calendario

		
	FIN
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
	cuando listaLlena => mostrar ("No se pudo insertar la nueva etapa en el modelo ", i.nomMod)
	
FIN




Procedimiento altaClientes(clientes: arbolClientes)
{Ingresa un cliente nuevo
PRE: arboles = A
POS: arboles = A1, A1 tiene un cliente nuevo
Excepciones:		}
VAR
	DNI: entero
	i: infoClientes
	
INICIO

	pedirDatosAltaClientes(DNI, i)
	
	insertar(clientes, DNI, i)
	
Excepciones
	cuando arbolLleno => mostrar("No se pudo ingresar el cliente nuevo")
	cuando salir => mostrar ("No se completó la operación")
FIN




Procedimiento altaVehiculos (E/S vehiculos: arbolVehiculos, E/S clientes: arbolClientes, E modelos: listaModelos)
{QH: Ingresa un nuevo vehículo y lo asocia con su dueño
PRE: vehiculos = V, modelos = M, clientes = C
POST: vehiculos = V1. V1 tiene un nuevo vehículo. La lista del nodo de C que corresponde al cliente ingresado tiene un elemento nuevo
EXC: }

VAR
	patente: cadena
	i: infoVehiculos 		
	l: infoClientes				
	
	
INICIO

	pedirDatosAltaVehiculos(patente, i, l, modelos, clientes, vehiculos)
	
	Insertar(vehiculos, patente, i)			//Insertar en Arbol vehiculos.
	
	insertar(l.vehiculos, patente, F)		//Agrega un nuevo vehículo a lista lista de vehículos del cliente
											//(Sin servicios realizados)	

Excepciones
	cuando salir => mostrar ("No se completó la operación")
	Cuando arbolLleno, listaLlena => Mostrar ("Error al ingresar vehículo nuevo")
	
FIN




Procedimiento altaServicios(E clientes: arbolClientes, E/S vehiculos: arbolVehiculos, E modelos: listaModelos)
{Ingresa un servicio nuevo a un vehículo
PRE:
POS:
Excepciones:		}
VAR
	pat: cadena
	i: infoVehiculos
	j: infoListaMant
	etapa: entero
	DNI: entero
	lista: listaVehiculos
	
INICIO
	pedirDatosAltaServicio(clientes, vehiculos, modelos, pat, j, etapa, DNI, lista)								
										
	recuClave(vehiculos, pat, i)
	
	insertar(i.mantenimientos, etapa, j)

	
	suprimir(lista, pat)
	insertar(lista, pat, V)		//LO MODIFICAMOS
	
Excepciones
	cuando listaLlena => Mostrar ("No se pudo agregar el servicio de la etapa de ", etapa," kms al vehículo de patente ", pat)
	cuando claveExiste => Mostrar ("Servicio ya existe")
	cuando salir => mostrar ("No se completó la operación")
FIN	















Procedimiento bajaModelo(E/S modelos: listaModelos, E/S clientes: arbolClientes, E/S vehiculos: arbolVehiculos)
{Elimina un modelo registrado
PRE: modelos = M, clientes = C, vehiculos = V
POS: modelos = M1, clientes = C1, vehiculos = V1.
M1 tiene un elemento menos
Las listas de los clientes de C1 no tienen vehículos del modelo ingresado.
V1 no tiene vehículos del modelo ingresado
Excepciones:	}

VAR
	cod: entero
	i: infoModelos

INICIO

	pedirDatosBajaModelo(modelos, cod, i)
	//E modelos, S cod, S i.
		
	eliminaVehiculosModelo(clientes, arbol, cod)
	
	vaciar(i.calendario)
	suprimir(modelos, cod)
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
	
FIN




Procedimiento bajaEtapas (E/S modelos: listaModelos, E/S vehiculos: arbolVehiculos)
{Elimina una etapa de mantenimiento del calendario de un modelo
PRE: modelos = M
POS: modelos = M1. La lista de calendario correspondiente al código de modelo ingresado tiene un elemento menos
Excepciones:		}

VAR
	cod, etapa: entero
	i: infoModelos
INICIO

	pedirDatosBajaEtapa(modelos, cod, etapa)
	//E modelos, S cod, etapa
	
	eliminarServiciosEtapa(vehiculos, cod, etapa)	
	
	//Una vez que tenemos el modelo y la etapa,
	//tendriamos que recorrer el arbol buscando los vehiculos
	//del modelo ingresado, y eliminar el servicio de esa etapa.
	
	
	recuClave(modelos, cod, i)
	
	suprimir(i.calendario, etapa)

Excepciones
	cuando salir => mostrar ("No se completó la operación")
	
FIN




Procedimiento bajaClientes (E/S clientes: arbolClientes, E/S vehiculos: arbolVehiculos)
{Elimina un cliente
PRE: clientes = C, vehiculos = V
POS: clientes = C1, vehiculos = V1. C1 no tiene el cliente ingresado por el usuario. V1 no tiene los vehículos registrados a nombre del cliente ingresado por el usuario
Excepciones:		}

VAR
	DNI: entero
	i: infoClientes
INICIO
	
	pedirDatosBajaCliente(clientes, DNI, i)
	//E clientes, S DNI, S i
	
	vaciarListaVehiculos(i.vehiculos, vehiculos)
	
	suprimir(clientes, DNI)
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
	
FIN




Procedimiento bajaVehiculos(E/S clientes: arbolClientes, E/S vehiculos: arbolVehiculos)
{Elimina un vehículo
PRE: clientes = C, vehiculos = V
POS: clientes = C1, vehiculos = V1.
V1 no tiene el vehículo ingresado por el usuario.
La lista de vehículos del cliente registrado en C1 no tiene
el vehículos ingresado por el usuario
Excepciones:		}

VAR
	pat: cadena
	i: infoVehiculos
	j: infoClientes
	
INICIO
	
	pedirDatosBajaVehiculo(vehiculos, pat, i)
	//E vehiculos, S pat, S i
		
	recuClave(clientes, i.dueño, j)
	suprimir(j.vehiculos, pat)
	
	//Primero lo elimina de la lista de vehiculos del //cliente y después del arbol
	
	vaciar(i.mantenimientos)
	suprimir(vehiculos, pat)
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
FIN




Procedimiento bajaServicios(E/S vehiculos: arbolVehiculos, E/S clientes: arbolClientes, E modelos: listaModelos)
{Elimina un servicio realizado de un vehículo registrado
PRE: vehiculos = V
POS: vehiculos = V1.
A la lista de mantenimientos del vehiculos ingresado por el usuario le falta un elemento
Excepciones:		}

VAR
	pat: cadena
	i: infoVehiculos
	etapa: entero
	j: infoClientes
INICIO

	pedirDatosBajaSerivicio(vehiculos, modelos, pat, i, etapa)
	//E vehiculos, S pat, S i, S etapa
	
	suprimir(i.mantenimientos, etapa)
	
	Si esVacia(i.mantenimientos) entonces
		buscar(clientes, i.dueño, j)
		suprimir(j.vehiculos, pat)
		insertar(j.vehiculos, pat, F)
		modificar(clientes, i.dueño, j)
	Fin Si
	//Si el vehículo no tiene mantenimientos registrados,
	//lo indicamos en la info de la lista de vehículos
	//de su dueño
		


Excepciones
	cuando salir => mostrar ("No se completó la operación")
	
FIN
	
	
	

Procedimiento modModelo (E/S modelos: listaModelos)
{Modifica los datos de un modelo.
PRE: modelos = M
POST: modelos = M' y M' tiene un nodo modificado}
Excepciones: }

VAR
	mod: entero
	info: infoModelo

INICIO

	pediDatosModifModelos(modelos, mod, info)
	//Pedimos info nueva de un modelo existente
	
	
	suprimir(modelos, mod)			
	//se elimina el modelo de la lista, y se vuelve a insertar, 
	//con solo el nombre modificado 
	Insertar(modelos, mod, info)
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
	
FIN




Procedimiento modEtapas(E/S modelos: listaModelos)
{Modifica una etapa de mantenimiento de un modelo. 
PRE: modelos = M
POST: modelos = M' y el modelo x (ingresado por el usuario) de M' tiene modificado su calentario de etapas
Excepciones: }

VAR
	mod: entero
	kEtapa: entero 			//clave de mantenimiento, cantidad de kilometros requeridos para la etapa
	pEtapa: real			//precio de la etapa
	i: infoModelos
	
INICIO

	pedirDatosModifEtapas(modelos, kEtapa, pEtapa, i)
	//pedimos info nueva de una etapa de mantenimiento existente
	//de un modelo existente
	
	suprimir(i.calendario, kEtapa)								
	//se elimina el nodo de mantenimiento, 
	//y se piden los nuevos datos 
	
	Insertar(i.calendario, kEtapa, pEtapa)
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
	
FIN




Procedimiento modClientes(E/S clientes: arbolClientes)
{Modifca los datos de un cliente
PRE: clientes = C 
POST: clientes = C' y C' tiene un cliente modificado
Excepciones: }

VAR	
	DNI: entero 
	infoC: infoCliente
	salida: logico

INICIO

	pedirDatosBajaCliente(clientes, DNI, infoC)
	//pedimos DNI de un cliente existente
	
	Repetir
	
		pedirDatosModifClientes(clientes, infoC, salida)
		//pedimos info nueva de un cliente existente
		
		
		modificar(clientes, DNI, infoC)
		
	hasta salida
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")

FIN




Procedimiento modVehiculos(E/S vehiculos: arbolVehiculos, E clientes: arbolClientes, E modelos: listaModelos)
{Modifica los datos de un vehiculo 
PRE: vehiculos = V, clientes = C, modelos = M.
POST: vehiculos = V' y V' tiene un nodo modificado
Excepciones: }
VAR
	auto: cadena 		//tipoclave del arbol de vehiculos, patente
	datos, j: infoVehiculos
	i: infoClientes
	
INICIO

	pedirDatosBajaVehiculo(vehiculos, auto, datos)
	//pedimos patente de un vehículo existente
	
	repetir
	
		pedirDatosModifVehiculos(clientes, modelos, datos, salida)
		//pedimos info nueva de un vehículo existente

		modificar(vehiculos, auto, datos)
		
	hasta que salida
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")

FIN



	
Procedimiento modServicios(E/S vehiculos: arbolVehiculos, E modelos: listaModelos)
{Modifica los servicios realizados sobre un vehiculo
PRE: vehiculos = V, modelos = M
POST: vehiculos = V', y V' tiene un servicio modificado}
Excepciones: }

VAR	
	salida: logico
	
	info: infoVehiculos
	pat: cadena
	etapa: entero					//tipoClave listaMant
	iServicio: infoListaMant
	
	
INICIO
	pedirDatosBajaServicio(vehiculos, modelos, pat,  etapa)
	//pedimos el servicio realizado sobre un vehículo

	
	repetir 
	
		pedirDatosModifServicio(modelos, etapa, info.mod, iServicio, info)
		//pedimos la info nueva de ese servicio
		
		suprimir(info.mantenimientos, etapa)
		INICIO
			Insertar(info.mantenimientos, etapa, iServicio)
		Excepciones
			cuando claveExiste => salida <- ingresoIncorrecto("La nueva etapa ingresada ya existe")
			
		//Al modifica el mantenimiento, puede ser que el vehículo
		//que se quiera modificar su lista de mantenimientos ya tenga 
		//el servicio de la etapa ingresada
		
	hasta salida

Excepciones
	cuando salir => mostrar ("No se completó la operación")
	
FIN

	
	
	
	
	
	
	
Procedimiento mantXCliente(E clientes: arbolClientes, E vehiculos: arbolVehiculos)
{Muestra los mantenimientos que solicitó un cliente ingresado por usuario
PRE: clientes = C, vehiculos = V
POS: -
Excepciones:	}

VAR
	DNI: entero
	i: infoClientes
INICIO

	pedirDatosBajaCliente(clientes, DNI, i)
	//E clientes, S DNI, S i
	
	mostrarMantClientes(vehiculos, i)
	
	//en i está la lista de vehículos. Nos fijamos si
	//cada vehículo tiene al menos un mant
	//(info de la lista de mant), y lo mostramos

	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
FIN




Procedimiento mantXMod(E modelos: listaModelos, E vehiculos: arbolVehiculos)
{Muestra los mantenimientos de un modelo ingresado por el usuario
PRE: modelos = M, vehiculos = V
POS: -
Excepciones:	}

VAR
	cod: entero
	i: infoModelos
INICIO

	pedirDatosBajaModelo(modelos, cod, i)
	//E modelos, S cod, S i.
	
	
	mostrarMantModelo(vehiculos, cod)
	
	//buscamos en el ABB los vehículos del modelo ingresado
	//y mostramos sus mantenimientos
	
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
FIN




Procedimiento datosClientes(E clientes: arbolClientes)
{Muestra los datos de los clientes que no han realizado mantenimientos en alguno de sus vehículos registrados
PRE: clientes = C
POS: -
Excepciones:		}

VAR
	qClientes: colaClientes
INICIO
	
	conseguirClientesSinMant(clientes, qClientes)
	//E clientes, S qClientes
	
	Mostrar("Clientes que no registraron ningún mantenimiento en alguno de sus vehículos registrados: ")
	
	mostrarDatosClientes(clientes, qClientes)
	////E clientes, E qClientes
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
FIN



	
	