/*NIVEL 3*/

Procedimiento pedirDatosAltaModelo(S info: infoModelos, S k: entero)
{Ingresa los datos para cargar un modelo nuevo
PRE: -
POS: info = I, k = K. 
I tiene la info correspondiente al modelo nuevo. 
K tiene el código de modelo
Excepciones: }

INICIO

	Mostrar ("Ingrese nombre del modelo")
	Ingresar (info.nomMod)
	k <- KAutoNum(modelos)
	crear (info.calendario)

FIN



Procedimiento pedirDatosAltaEtapas(S cod: entero, S kms: entero; S precio: real)
{Ingresa y valida los datos a insertar en una etapa de mantenimiento
PRE:
POS: cod = C, kms = K, precio = P. 
C es una clave válida de la lista modelos, 
K es un kilometraje válido
P es un precio válido
Excepciones: salir}
VAR


INICIO
	pedirCod(cod, modelos)
	
	pedirKMS(kms, MIN_KMS)
	
	pedirPrecio(precio, MIN_PRECIO)
FIN



Procedimiento pedirDatosAltaClientes(S DNI: entero, S i: infoClientes)
{Ingresa y valida los datos a insertar en un cliente nuevo
PRE:
POS: DNI = D, i = I. 
D tiene un DNI válido de un cliente nuevo. 
I tiene la info correspondiente del cliente nuevo
Excepciones: salir}
VAR
	
INICIO
	pedirDNI(clientes, DNI)
	
	pedirNombre(i.nombre, i.apellido)
	
	pedirTel(i.tel)
	
	pedirEmail(i.email)
	
	crear(i.vehiculos)
FIN





Procedimiento pedirDatosAltaVehiculos(S patente: cadena, S i: infoVehiculos, S l: infoClientes, E modelos: listaModelos, E clientes: arbolClientes, E vehiculos: arbolVehiculos)
{Ingresa y valida los datos para cargar un vehículo nuevo
PRE: modelos = M, clientes = C
POS: patente = P, i = I, l = L. 
P tiene una patente válida. 
I tiene la info del vehículo nuevo. 
L tiene la info del dueño del vehículo
Excepciones: salir}

INICIO

	pedirPatente(vehiculos, patente)
	
	pedirAnio(i.año, MAX_ANIO)
	
	pedirCod(i.mod, modelos)

	Crear (i.mantenimientos)
	
	buscarDueño(clientes, l, i.dueño) //Busca el dueño dentro del arbol de clientes.
	

FIN


Procedimiento pedirDatosAltaServicio(E clientes: arbolClientes, E vehiculos: arbolVehiculos, E modelos: listaModelos, S pat: cadena, S j: infoListaMant, S etapa: entero, S DNI: entero, S lista: listaVehiculos)
{Ingresa y valida los datos de un servicio realizado en un vehiculo
PRE: clientes = C, vehiculos = V, modelos = M
POS: pat = P, lista = L, etapa = E, DNI = D
L tiene la lista de vehículos registrado del cliente. 
P tiene una patente válida.
E es una etapa válida para el modelo de vehículo.
D es un DNI válido
Excepciones: salir}
VAR
	iClien: infoClientes
	iVehi: infoVehiculos

INICIO
	buscarDueño(clientes, iClien, DNI)
		
	buscarVehiculo(vehiculos, iClien.vehiculos, iVehi, pat)
			
	ingresarEtapa(modelos, iVehi.mod, j, etapa)
	
	lista <- iClien.vehiculos //le pasamos la lista de vehiculos del cliente ingresado
FIN











Procedimiento vaciarListaVehiculos (E/S lista: listaVehiculos, E/S vehiculos: arbolVehiculos)
{Elimina los vehículos de la lista de vehículos de un cliente y del ABB de vehículos
PRE: lista: L, vehiculos = V
POS: lista = L1, vehiculos = V1. L1 está vacía. V1 no tiene los elementos de L
Excepciones:		}

VAR
	k, aux: cadena
	OK, i: logico
INICIO
	OK <- V
	recuPrim(lista, k)
	Mientras OK hacer
	INICIO
		recuClave(lista, k, i)
		aux <- k
		recuSig(lista,k,k)
		INICIO
			suprimirVehiculo(vehiculos, aux)
			suprimir(lista, aux)
		Excepciones
			cuando claveNoExiste => nada
			//No tendría que tirar claveNoExiste porque
			se supone que el vehículo se cargó tanto 
			en el ABB como en la lista del cliente
		FIN
		
	Excepciones
		cuando claveEsUltima => OK <- F
								suprimirVehiculo(vehiculos, aux)
								suprimir(lista, aux)
	FIN
	
FIN



Procedimiento pedirDatosBajaModelo(E modelos: listaModelos, S cod: entero, S i: infoModelos)
{Ingresa un código existente al usuario
PRE: modelos = M
POS: cod = C, i = I. C es un código que existe en la lista de modelos. 
I es su info.
Excepciones: salir}
VAR
	OK: logico
INICIO
	Si (no(esVacia(modelos)))
		pedirCod(cod, modelos)
		recuClave(modelos,cod,i)
	Si no
		Mostrar("No hay ningún modelo cargado")
	Fin Si
FIN


Procedimiento eliminaVehiculosModelo (E/S clientes: arbolClientes, E/S vehiculos: arbolVehiculos, E cod)
{Elimina todos los vehiculos de un modelo
PRE: clientes = C, vehiculos = V, cod = M
POS: clientes = C1, vehiculos = V1. V1 no tiene los vehiculos de modelo de código M. Los clientes de C1 no tienen vehículos de modelo de código M en sus listas de vehículos
Excepciones:		}

VAR
	qVehiculos: colaVehiculos
	qClientes: colaClientes
	pat: cadena
	k: entero
	i: infoVehiculos
	j: infoClientes
INICIO
	crear(qVehiculos)
	inOrder(vehiculos, qVehiculos)
	
	Mientras no(esVacia(qVehiculos)) hacer
		frente(qVehiculos, pat)
		desencolar(qVehiculos)
		buscar(vehiculos, pat, i)
		Si (i.mod = cod) entonces
		INICIO
		//Si encuentra un vehículo del modelo que se quiere eliminar, primero lo elimina //de la lista de vehículos de su dueño y después del arbol
			buscar(clientes, i.dueño, j)
			suprimir(j.vehiculos, pat)
			suprimirVehiculo(vehiculos, k)
		Excepciones
			cuando claveNoExiste => nada
			//no tendría que suceder
		Fin Si
	Fin Mientras
FIN



Procedimiento pedirDatosBajaEtapa(E modelos: listaModelos, S cod, etapa: entero)
{Ingresa y valida una etapa de mantenimiento de un modelo
PRE: modelos = M
POS: cod = C, etapa = E. C es un código de modelo y E es una etapa de mantenimiento del modelo C
Excepciones: salir}

VAR
	OK: logico
	i: infoModelos
	
INICIO

	Si no(esVacia(modelos)) entonces
		pedirCod(cod, modelos)
		recuClave(modelos, cod, i)
		Si no(esVacia(i.calendario)) entonces
			pedirEtapa(etapa, modelos, cod)
		Si no
			Mostrar("El modelo no tiene ninguna etapa de mantenimiento cargada")
		Fin Si
	Si no
		Mostrar("No hay ningún modelo cargado")
	Fin Si

FIN
		
		

Procedimiento pedirDatosBajaCliente(E clientes: arbolClientes, S DNI: entero, S i: infoClientes)
{Ingresa datos de un cliente a eliminar
PRE: clientes = C.
POS: DNI = D. D es el DNI de un cliente a eliminar
Excepciones: salir}

VAR
	OK: logico
	
INICIO
	Si no(esVacia(clientes))
		Repetir
			Mostrar("Ingrese el DNI del cliente a eliminar")
			ingresar(DNI)
			INICIO
				recuClave(clientes, DNI, i)
				OK <- V
			Excepciones
				cuando claveNoExiste => OK <- no(ingresoIncorrecto("Cliente no existe"))
			FIN
		Hasta que (OK) y (DNI >= 0)
	Si no
		Mostrar ("No hay ningún cliente cargado")
FIN



Procedimiento pedirDatosBajaVehiculo(E vehiculos: arbolVehiculos, S pat: cadena, S i: infoVehiculos)
{Ingresa datos de un vehículo a eliminar
PRE: vehiculos = V
POS: pat = P, i = I. P es una patente existente. I es su info
Excepciones: salir}

VAR
	OK: logico
INICIO

	Si no(esVacia(vehiculos)) entonces
		Repetir
			pat <- obtenerPatente()
			INICIO
				buscar(vehiculos, pat, i)
				OK <- V
			Excepciones
				cuando claveNoExiste => OK <- no(ingresoIncorrecto("Patente no existe"))
			FIN
		Hasta que OK
	Si no
		Mostrar("No hay ningún vehículo cargado")
	Fin Si
	
FIN





Procedimiento pedirDatosBajaServicio(E vehiculos: arbolVehiculos, E modelos: listaModelos, S pat: cadena, S info: infoVehiculos, S etapa: entero)
{Ingresa los datos de una etapa de mantenimiento a eliminar
PRE: vehiculos = V
POS: pat = P, info = I, etapa = E.
P es la patente del vehículo a eliminar la etapa
I es su info.
E es la etapa de mantenimiento a eliminar
Excepciones: salir}

VAR
	i: infoListaMant
INICIO

	pedirDatosAltaVehiculos(vehiculos, pat, info)
	
	Si no(esVacia(info.mantenimientos)) entonces
		Repetir
			pedirEtapa(etapa, modelos, info.mod)
			INICIO
				recuClave(info.mantenimientos, etapa, i)
				OK <- V
			Excepciones
				cuando claveNoExiste => OK <- no(ingresoIncorrecto("Servicio de esa etapa no fue realizado")
			FIN	
		Hasta que OK
	Si no
		Mostrar("No hay ningún servicio realizado sobre el vehículo")
	Fin Si
	
FIN
