Funcion obtenerPatente(): cadena
{Ingresa una patente válida
PRE: -
POS: obtenerPatente = P. P es una cadena con una patente válida
Excepciones: -}

VAR
	letras: cadena
	num: entero
INICIO
	Repetir
		Mostrar("Ingrese letras")
		ingresar(cad)
	Hasta que (cad >= "AAA") y (cad <= "ZZZ")
	
	num <- enteroEnRango("Ingrese números", 0, 999)
	
	
	obtenerPatente <- cad + aCadena(num)	//Concatena las letras con los números en una sola cadena
	
FIN

Funcion obtenerFecha(): entero
{Ingresa una fecha válida
PRE: -
POS obtenerFecha = F. F es un valor correspondiente a una fecha válida
Excepciones: -}
VAR
	año, mes, dia: entero
	
INICIO
	año <- enteroEnRango("Ingrese el año", año_ACTUAL, 9999)
	mes <- enteroEnRango("Ingrese el mes", 1, 12)
	Segun (mes) hacer
		1,3,5,7,8,10,12:
			dia <- enteroEnRango("Ingrese el dia", 1, 31)
		4,6,9,11:
			dia <- enteroEnRango("Ingrese el dia", 1, 30)
		2:
			Si (esBisiesto(año)) entonces
				dia <- enteroEnRango("Ingrese el dia", 1, 29)
			Si no
				dia <- enteroEnRango("Ingrese el dia", 1, 28)
			Fin Si
	Fin Segun

	
	
	
Funcion esBisiesto (x:entero): logico
{Calcula si un año pasado es bisiesto
PRE: x = X. X es un año válido
POS: esBisiesto = ((V) o (F))}

INICIO

	Si ((x MOD 4 = 0) y ((x MOD 100 <> 0) o (x MOD 400 = 0))) entonces
		esBisiesto <- V
	Si no
		esBisiesto <- F
	Fin Si
	
FIN



FUNCION KAutoNum(E modelos: tipoLista)
{QH: Devuelve un valor autonumerado
PRE: modelos = M
POST: KAutoNum = N y N >= 0
Excepciones: -}

Var

Inicio

	si esVacia(modelos) = V entonces
		KAutoNum <- 1
	sino
		KAutoNum <- longitud(modelos) + 1
	FinSi
Fin


Funcion ingresoIncorrecto (E msj: cadena): lógico
{Muestra un mensaje y pregunta si se desea continuar
PRE: msj = M
POS: ingresoIncorrecto = F si el usuario confirma.
Excepciones: salir}
VAR
	cad: cadena
INICIO
	cad <- msj + "¿Desea reintentar?" 	//Concatenamos las dos cadenas
	Si (confirma(cad)) entonces
		ingresoIncorrecto <- F			//Si el usuario ingreso una 's' o 'S' devuelve V
	Si no
		lanzar salir					//si ingresó una 'n' o 'N', lanza la excepción
	Fin Si
	
FIN





Procedimiento suprimirVehiculo (E/S vehiculos: arbolVehiculos, E k: entero)
{Suprime un vehículo
PRE: vehiculos = V, k = K
POS: vehiculos = V1. V1 no tiene el elemento de clave K
Excepciones:		}

VAR
	i: infoVehiculos
	
INICIO
	buscar(vehiculos, k, i)
	vaciar(i.mantenimientos)
	suprimir(vehiculos, k)
Excepciones
	cuando claveNoExiste => nada
	//No tendría que suceder
FIN

	