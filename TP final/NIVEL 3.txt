/*NIVEL 3*/

Procedimiento pedirDatosAltaEtapas(S cod: entero), S kms: entero; S precio: real)
{Ingresa y valida los datos a insertar en una etapa de mantenimiento
PRE:
POS: cod = C, kms = K, precio = P. C es una clave válida de la lista modelos, K y S son valores válidos
Excepciones:		}
VAR
	i: tipoInfo (modelos)
	OK: logico

INICIO
	Repetir
		Mostrar("Ingrese el código de modelo")
		ingresar(cod)
		INICIO
			recuClave(modelos, cod, i)
			OK <- V
		Excepciones
			cuando claveNoExiste => OK <- F
									Mostrar("Clave de modelo no registrada")
		FIN
	Hasta que (OK)
	
	Repetir
		Mostrar("Ingrese cantidad de kilómetros correspondiente a la etapa de mantenimiento")
		ingresar(kms)
	Hasta que (kms >= MIN_KMS)
	
	Repetir
		Mostrar("Ingrese precio base de la etapa de mantenimiento")
		ingresar(precio)
	Hasta que (precio >= MIN_PRECIO)
FIN



Procedimiento pedirDatosAltaClientes(S entero, S i: infoClientes)
{Ingresa y valida los datos a insertar en un cliente nuevo
PRE:
POS: DNI = D, i = I. DNI
Excepciones:		}
VAR
	i: tipoInfo (clientes)
	OK: logico
	
INICIO
	Repetir
		Mostrar("Ingrese el DNI del cliente nuevo")
		ingresar(DNI)
		INICIO
			recuClave(clientes, DNI, i)
			OK <- V
		Excepciones
			cuando claveNoExiste => OK <- F
									Mostrar("Cliente ya existe")
	Hasta que (OK) y (DNI >= 0)
	
	Mostrar("Ingrese nombre del cliente nuevo")
	ingresar(i.nombre)
	Mostrar("Ingrese apellido del cliente nuevo")
	ingresar(i.apellido)
	
	Repetir
		Mostrar ("Ingrese número de teléfono celular del cliente nuevo")
		ingresar(i.tel)
	Hasta que (i.tel >= MIN_TEL)
	
	Mostrar("Ingrese email del cliente nuevo")
	ingresar(i.email)
	
	crear(i.vehiculos)
FIN




Procedimiento pedirDatosAltaServicio(S pat: cadena, S j: infoListaMant, E clientes: tipoArbol, E vehiculos: tipoArbol, E modelos: tipoLista, S etapa: entero, S lista: listaVehiculos)
{Ingresa y valida los datos de un servicio realizado en un vehiculo
PRE: clientes = C, vehiculos = V, modelos = M
POS: pat = P, lista = L, etapa = E. L tiene la lista de vehículos registrado del cliente. P tiene una patente válida. E es una etapa válida para el modelo de vehículo
Excepciones:		}
VAR
	iClien: tipoInfo (clientes)
	iVehi: tipoInfo (vehiculos)

INICIO

	buscarDueño(clientes, iClien, DNI, lista)
		
	buscarVehiculo(vehiculos, iClien.vehiculos, iVehi)
			
	ingresarEtapa(modelos, iVehi.mod, j, etapa)
		
		
Excepciones
	cuando errorEnProc => Mostrar("No se pudo completar la operación")
FIN




Procedimiento pedirDatosAltaVehiculos(S patente: cadena, S i: infoVehiculos, S l: infoClientes, E modelos: tipoLista)
{Ingresa y valida los datos para cargar un vehículo nuevo
PRE: modelos = M
POS: patente = P, i = I, l = L. P tiene una patente válida. I tiene la info del vehículo nuevo. L tiene la info del dueño del vehículo
Excepciones: errorEnProc}

VAR
	j: infoModelos

INICIO

	patente <- obtenerPatente()
	
	Repetir
		Mostrar ("ingrese año de fabricacion")
		Ingresar (i.año)
	Hasta (i.año <= MAXANIO)
	
	Repetir
		Mostrar ("Ingrese numero de modelo")
		Ingresar (i.mod)							//el modelo se verifica mendiante el numero del autonumerado.
		INICIO
		RecuClave (modelos, i.mod, j)				//se verifica que el modelo ingresado sea correcto y esté en el listado de modelos.
			OK <- V
		Excepciones
			cuando claveNoExiste => OK <- F
									Mostrar("Código de modelo ingresado no existe")
		FIN
	Hasta que OK
	
	Crear (i.mantenimientos)
	
	Mostrar ("Ingrese el documento del dueño")
	Ingresar (i.dueño)
	buscar(clientes, i.dueño, l)					//Busca el dueño dentro del arbol de clientes. Si esta, sigue la ejecución, sino, termina.
	

Excepciones
	Cuando claveNoExiste => lanzar errorEnProc

FIN


Procedimiento pedirDatosAltaModelo(S info: infoModelos, S k: entero)
{Ingresa los datos para cargar un modelo nuevo
PRE: -
POS: info = I, k = K. I tiene la info correspondiente al modelo nuevo. K tiene el código de modelo
Excepciones: }

INICIO

	Mostrar ("Ingrese nombre del modelo")
	Ingresar (info.nomMod)
	k <- KAutoNum(modelos)
	crear (info.calendario)

FIN








