/*NIVEL 4*/

Procedimiento pedirCod(S cod: entero, E modelos: listaModelos, S i: infoModelos)
{Ingresa y valida un código de modelo
PRE: modelos = M
POS: cod = C, i = I.
C es un código de modelo válido
I es su info
Excepciones: salir}
VAR
	OK: logico

INICIO
	Repetir
		CLS
		cod <- mayorCero("Ingrese el código de modelo")
		INICIO
			recuClave(modelos, cod, i) //ADT LO
			OK <- V
		Excepciones
			cuando claveNoExiste => OK <- ingresoIncorrecto("Código no existe")
									//Nivel 5
		FIN
	Hasta que (OK)
FIN


Procedimiento pedirEtapaNueva(S kms: tipoClaveCalendario, E i:infoModelos)
{Ingresa y valida un valor de kilometraje para una etapa de mantenimiento
PRE: i = I. I es la info del modelo
POS: kms = K. K es un valor de kilometraje válido para una etapa de mantenimiento
Excepciones: salir}
VAR
	precio: entero
	OK: logico
INICIO
	Repetir
		CLS
		kms <- mayorCero("Ingrese kilometraje de la etapa")
		INICIO
			recuClave(i.calendario, kms, precio) //ADT LO
			OK <- ingresoIncorrecto("Etapa ya existe")	//Nivel 5
		Excepciones
			cuando claveNoExiste => OK <- V
		FIN		
	Hasta que (OK)
FIN


Procedimiento pedirPrecio(S precio: entero, E min: entero)
{Ingresa y valida un precio
PRE: min = M
POS: precio = P. P es un valor de precio válido
Excepciones: salir}

VAR
	OK: logico
	
INICIO
	Repetir
		CLS
		precio <- mayorCero("Ingrese precio del servicio")
		
		Si (precio < min) entonces
			OK <- ingresoIncorrecto("Precio incorrecto")	//Nivel 5
		Si no
			OK <- V
		Fin Si
	Hasta que (OK)
FIN


Procedimiento pedirDNInuevo (E clientes: arbolClientes, S DNI: tipoClaveClientes)
{Ingresa y valida un DNI
PRE: clientes = C
POS: DNI = D. D es un documento registrado en el ABB
Excepciones: salir}

VAR
	i: infoClientes
	OK: logico
	
INICIO

	Repetir
		CLS
		DNI <- mayorCero("Ingrese el DNI del cliente")
		
		INICIO
			buscar(clientes, DNI, i) 					//ADT LO
			OK <- ingresoIncorrecto("Cliente ya existe")	//Nivel 5
		Excepciones
			cuando claveNoExiste => OK <- V
		FIN
	Hasta que (OK)
	
FIN



Procedimiento pedirNombre (S nombre, apellido: cadena)
{Ingresa un nombre y apellido
PRE: -
POS: nombre = N, apellido = A
Excepciones:-}

INICIO
	CLS
	nombre <- textoNoVacio("Ingrese nombre del cliente")
	apellido <- textoNoVacio("Ingrese apellido del cliente")
	
FIN



Procedimiento pedirTel (S tel: entero)
{Ingresa y valida un número de teléfono
PRE:
POS: tel = T. T es un número de teléfono válido
Excepciones: salir}

	OK: logico
INICIO

	Repetir
		CLS
		tel <- mayorCero("Ingrese número de teléfono celular del cliente nuevo")
		
		Si(tel < MIN_TEL) entonces
			OK <- ingresoIncorrecto("Número incorrecto")	//Nivel 5
		Si no
			OK <- V
		Fin Si
	Hasta OK
	
FIN



Procedimiento pedirEmail (S email: cadena)
{Ingresa una dirección de email
PRE: -
POS: email = E. E tiene una dirección de email
Excepciones: -}

INICIO
	CLS
	email <- textoNoVacio("Ingrese email del cliente nuevo")
	
FIN



Procedimiento cambioPatente(E/S clientes: arbolClientes, E/S vehiculos: arbolVehiculos, E/S pat: tipoClaveAuto, E datos: infoVehiculos)
{Cambia la patente de un vehículo
PRE: vehiculos = V, pat = P, datos = D
POS: vehiculos = V1, clientes = C1
V1 es V pero con un nodo con clave distinta
C1 es C pero uno de sus nodos tiene un nodo con una lista con una clave distinta
Excepciones: salir}
VAR
	iClien: infoClientes
	tieneMant: logico
INICIO

	suprimirVehiculo(vehiculos, pat)
	buscar(clientes, datos.dueño, iClien)
	recuClave(iClien.vehiculos, pat, tieneMant)
	suprimir(iClien.vehiculos, pat)
	
	pedirPatenteNueva(vehiculos, pat)
	
	insertar(vehiculos, pat, datos)
	insertar(iClien.vehiculos, pat, tieneMant)
	modificar(clientes, datos.dueño, iClien)

FIN



Procedimiento pedirPatenteNueva(E vehiculos: arbolVehiculos, S pat: tipoClaveAuto)
{Ingresa y valida una patente nueva
PRE: vehiculos: V
POS: pat = P
P es una patente nueva para vehiculos.
Excepciones: salir}

VAR
	OK: logico
	i: infoVehiculos
INICIO

	Repetir
		CLS
		pat <- obtenerPatente()								//Nivel 5
		INICIO
			buscar(vehiculos, pat, i) 						//ADT ABB	
			OK <- ingresoIncorrecto("Patente ya existe")	//Nivel 5
		Excepciones
			cuando claveNoExiste => OK <- V
		FIN
	Hasta que OK
	
FIN



Procedimiento pedirAño (S año: entero, E min: entero)
{Ingresa y valida un año
PRE: tope = T
POS: año = A. A es un año válido
Excepciones: salir}
VAR
	OK: logico
INICIO
	
	Repetir
		CLS
		año <- mayorCero("ingrese año de fabricacion")
		Si (año < min) entonces
			OK <- ingresoIncorrecto("Año incorrecto")	//Nivel 5
		Si no
			OK <- V
		Fin Si
	Hasta que OK

FIN





Procedimiento pedirKmsReal(S kms: entero, E min: entero)
{Ingresa y valida un kilometraje real de un vehículo
PRE: min = M, M es el valor mínimo que puede tener el vehículo para realizar un mantenimiento
POS: kms = K. K >= M
Excepciones: salir}

VAR
	OK : logico
INICIO
	Repetir
		CLS
		kms <- mayorCero("Ingrese kilometraje real del vehículo")
		
		Si (kms >= min) entonces
			OK <- V
		Si no
			OK <- ingresoIncorrecto("Kilometraje incorrecto") //Nivel 5
		Fin Si
	Hasta que OK
FIN


Procedimiento pedirObs(S obs: cadena)
{Ingresa una observación
PRE: -
POS: obs = O
Excepciones: -}

INICIO
	Mostrar("Ingrese las observaciones del servicio")
	Ingresar(obs)
FIN


Procedimiento pedirEtapaExistente (S etapa: tipoClaveCalendario, S iEtapa: entero E modelos: listaModelos, E codMod: entero)
{Ingresa y válida una etapa de servicio de un vehículo
PRE: modelos = M, codMod = C
POS: etapa = E, iEtapa = I.
E corresponde a una etapa de servicio del modelo de código C
I es la info de la etapa}

VAR
	iMod: infoModelos
	OK: logico
		
INICIO

	recuClave(modelos, codMod , iMod)			//ADT LO
	//Sabemos que el modelo está registrado, no tira claveNoExiste
	
	Repetir
		etapa <- mayorCero("Ingrese etapa de servicio")
		
		INICIO
							
			recuClave(iMod.calendario, etapa, iEtapa) 	//ADT LO
			//Si la etapa no está registrada para el modelo ingresado, tira claveNoExiste
			OK <- V
		Excepciones
			cuando claveNoExiste => OK <- ingresoIncorrecto("Etapa no registrada")
			//Nivel 5
		FIN
	Hasta que OK
	
FIN



Procedimiento ingresarEtapa (E modelos: listaModelos, E iVehi: infoVehiculos, S j: infoListaMant, S etapa: tipoClaveCalendario)
{Ingresa una etapa de servicio de un vehículo registrado
PRE: modelos = M, codMod = C. C es el código de modelo del vehículo
POS: j = J, etapa = E.
J tiene la info de un servicio
E es una etapa de mantenimiento
Excepciones:  salir}
VAR
	OK: logico
	infoMod: infoModelos
	primEtapa: tipoClaveCalendario
	iEtapa: entero
	
INICIO
	recuClave(modelos, iVehi.mod, infoMod) 	//ADT LO
	recuPrim(infoMod.calendario, primEtapa) //ADT LO
	//Recuperamos la primer etapa de mantenimiento del modelo del vehiculo
	
	pedirKmsReal(j.kmReal, primEtapa)		//NIVEL 4
	
	Repetir
		pedirEtapaExistente(etapa, iEtapa, modelos, iVehi.mod)	//Nivel 4
		Si (j.kmReal < etapa) entonces
			OK <- ingresoIncorrecto("La etapa de mantenimiento no corresponde con el kilometraje del vehículo")
			//Nivel 5
		Si no
			OK <- V
		Fin Si
	Hasta que OK
	
	//primero pedir el kilometraje, y despues la etapa
	//si la etapa es menor al kilometraje, incorrecto
	
	
	j.fecha <- obtenerFecha()		//Nivel 5
	
	pedirObs(j.obs)					//Nivel 4
	
	pedirPrecio(j.precio, iEtapa)	//NIVEL 4
Excepciones
	cuando listaVacia => 
		Mostrar("El modelo no cuenta con etapas de mantenimiento registradas")
		lanzar salir
	
FIN




Procedimiento vaciarListaVehiculos (E/S lista: listaVehiculos, E/S vehiculos: arbolVehiculos)
{Elimina los vehículos de la lista de vehículos de un cliente y del ABB de vehículos
PRE: lista: L, vehiculos = V
POS: lista = L1, vehiculos = V1. L1 está vacía. V1 no tiene los elementos de L
Excepciones:		}

VAR
	k, aux: tipoClaveAuto
	OK, i: logico
INICIO
	OK <- V
	recuPrim(lista, k)				//ADT LO
	Mientras OK hacer
	INICIO
		recuClave(lista, k, i)		//ADT LO
		aux <- k
		recuSig(lista,k,k)			//ADT LO
		suprimirVehiculo(vehiculos, aux)	//Nivel 5
		suprimir(lista, aux)				//ADT LO
		//No tendría que tirar claveNoExiste porque
		se supone que el vehículo se cargó tanto 
		en el ABB como en la lista del cliente
	Excepciones
		cuando claveEsUltima => OK <- F
								suprimirVehiculo(vehiculos, aux)		//Nivel 5
								suprimir(lista, aux)					//ADT LO
	FIN
	
FIN



Procedimiento eliminaVehiculosModelo (E/S clientes: arbolClientes, E/S vehiculos: arbolVehiculos, E cod: entero)
{Elimina todos los vehiculos de un modelo
PRE: clientes = C, vehiculos = V, cod = M
POS: clientes = C1, vehiculos = V1. V1 no tiene los vehiculos de modelo de código M. 
Los clientes de C1 no tienen vehículos de modelo de código M en sus listas de vehículos
Excepciones: salir}

VAR
	qVehiculos: colaVehiculos
	pat: tipoClaveAuto
	i: infoVehiculos
	j: infoClientes
	
INICIO
	crear(qVehiculos)						//ADT Cola
	inOrder(vehiculos, qVehiculos)			//ADT ABB
	
	Mientras no(esVacia(qVehiculos)) hacer	//ADT Cola
		frente(qVehiculos, pat)					//ADT Cola
		desencolar(qVehiculos)					//ADT Cola
		buscar(vehiculos, pat, i)				//ADT ABB
		Si (i.mod = cod) entonces
		INICIO
		//Si encuentra un vehículo del modelo que se quiere eliminar, primero lo elimina 
		//de la lista de vehículos de su dueño y después del arbol
			buscar(clientes, i.dueño, j)		//ADT ABB
			suprimir(j.vehiculos, pat)			//ADT ABB
			modificar(clientes, i.dueño, j)		//ADT ABB
			suprimirVehiculo(vehiculos, pat)	//Nivel 5
		Excepciones
			cuando claveNoExiste => nada
			//no tendría que suceder
		Fin Si
	Fin Mientras
Excepciones
	cuando errorEnCola => lanzar salir
FIN







Procedimiento eliminarServiciosEtapa(E/S vehiculos: arbolVehiculos, E cod, etapa: tipoClaveCalendario)
{Elimina los servicios de una etapa en los vehículo de un modelo
PRE: vehiculos = V, cod = C, etapa = E
POS: vehiculos = V1. Los vehículos de V1 no tiene registrado el servicio de la etapa E
Excepciones: salir}

VAR
	qVehiculos: colaVehiculos
	k: tipoClaveAuto
	i: infoVehiculos
INICIO
	crear(qVehiculos)						//ADT Cola
	inOrder(vehiculos, qVehiculos)			//ADT ABB
	
	Mientras no(esVacia(qVehiculos)) hacer	//ADT Cola
		frente(qVehiculos, k)					//ADT Cola
		desencolar(qVehiculos)					//ADT Cola
		
		buscar(vehiculos, k, i)						//ADT ABB
		Si (i.mod = cod) entonces
			INICIO
				suprimir(i.mantenimientos, etapa)	//ADT LO
				modificar(vehiculos, k, i)			//ADT ABB
			Excepciones
				cuando claveNoExiste => nada
				//Puede ser que el vehículo no tenga el servicio de esa etapa realizado
			FIN
		Fin Si
	Fin Mientras
Excepciones
	cuando errorEnCola => lanzar salir
FIN



Procedimiento menuModifCliente()
Inicio	
	CLS
	mostrar("¿Qué desea modificar?")
	mostrar("----------------------")
	mostrar("1. Nombre y Apellido")
	mostrar("2. Teléfono de contacto")
	mostrar("3. Email")
	mostrar("4. Salir")
Fin



Procedimiento menuModifVehiculo()
INICIO
	CLS
	mostrar("¿Qué desea modificar? ")
	mostrar("----------------------")
	mostrar("1. Patente")
	mostrar("2. Año de Fabricación")
	mostrar("3. Cambiar dueño")
	mostrar("4. Salir")
FIN



Procedimiento menuModifServicio()
{Menu para modificar informacion de un servicio realizado}

Inicio
	CLS
	mostrar("¿Qué desea modificar? ")
	mostrar("----------------------")
	mostrar("1. Kilometraje real del vehículo")
	mostrar("2. Fecha en que se realizó el servicio")
	mostrar("3. Observaciones del servicio")
	mostrar("4. Precio final del servicio")
	mostrar("5. Salir")
Fin




Procedimiento pedirDNIexistente(E clientes: arbolClientes, S DNI: tipoClaveClientes, S i: infoClientes)
{Ingresa datos de un cliente a existente
PRE: clientes = C.
POS: DNI = D. D es el DNI de un cliente a eliminar
Excepciones: salir}

VAR
	OK: logico
	
INICIO
	Repetir
	INICIO
		CLS
		DNI <- mayorCero("Ingrese el DNI del cliente existente")
		buscar(clientes, DNI, i)
		OK <- V
	Excepciones
		cuando claveNoExiste => OK <- ingresoIncorrecto("Clientes no existe")
	FIN
	Hasta que OK
FIN



Procedimiento cambioDueño(E clientes: arbolClientes, E pat: tipoClaveAuto, E/S iDueño: infoVehiculo)
{Cambia el dueño de un vehículo
PRE: clientes = C, pat = P, iDueño = D
POS: iDueño = D1. D1 es la info del vehículo con dueño nuevo
Excepciones: salir}

VAR
	i: infoClientes
	tieneMant: logico
INICIO
	buscar(clientes, iDueño.dueño, i)
	recuClave(i.vehiculos, pat, tieneMant)
	suprimir(i.vehiculos, pat)
	modificar(clientes, iDueño.dueño, i)
	
	mostrar("Ingrese DNI del nuevo propietario (registrado en el sistema) del vehículo")
	pedirDNIexistente(clientes, iDueño.dueño, i)
	
	insertar(i.vehiculos, pat, tieneMant)
	modificar(clientes, iDueño.dueño, i)
	
FIN






Procedimiento mostrarMant (E pat: tipoClaveAuto, E infoVehi: infoVehiculos)
{Muestra los mantenimientos de un vehículo
PRE: pat = P, infoVehi = I. I es la info del vehículo de patente P
POS: -
Excepciones: }

VAR
	k: tipoClaveCalendario
	infoLM: infoListaMant
	OK: logico
	
INICIO
	OK <- V

	recuPrim(infoVehi.mantenimientos, k)
	
	Mientras OK hacer
		recuClave(infoVehi.mantenimientos, k, infoLM)
		Mostrar("Propietario del vehículo: ", infoVehi.dueño)
		Mostrar("Patente del vehículo: ", pat)
		Mostrar("Etapa de mantenimiento: ", k," kilómetros")
		Mostrar("Kilometraje real: ", infoLM.kmReal)
		Mostrar("Fecha de realización de servicio: ", infoLM.fecha)
		Mostrar("Observaciones hechas: ", infoLM.obs)
		Mostrar("Precio final: ", infoLM.precio)
		
		INICIO
			recuSig(infoVehi.mantenimientos,k,k)
		Excepciones
			cuando claveEsUltima => OK <- F
		FIN
	Fin Mientras
	
Excepciones
	cuando listaVacia => Mostrar("No se registró ningún mantenimiento sobre el vehículo de patente ", pat.letras, pat.num)
FIN



Funcion tieneMant(E i: infoCliente): logico
{Verifica si el cliente reaizó mantenimientos en todos sus vehículos
PRE: i = I. I es la info del cliente
POS: tieneMant <- V ó F. Será V cuando todos sus vehículos tengan algún servicio realizado
Excepciones: }

VAR
	pat: tipoClaveAuto
	OK, info: logico
	//la info de la lista de vehiculos del cliente indica
	//si tiene al menos un servicio realizado
INICIO

	OK <- V
	recuPrim(i.vehiculos)			//ADT LO
	
	Mientras OK hacer
		recuClave(i.vehiculos, pat, info) 	//ADT LO
		Si no(info) entonces
			OK <- F
		Fin Si
		//Si el vehiculo no tiene mantenimientos realizados,
		//se corta el bucle y la funcion devuelve F
		INICIO
			recuSig(i.vehiculos,pat,pat)	//ADT LO
		Excepciones
			cuando claveEsUltima => OK <- F
		FIN
	Fin Mientras
	
	tieneMant <- info 
	//Si fueron todas V (si todos los vehículos tienen al menos un servicio realizado),
	//la función devuelve V.
	//Si se encontró un vehículo sin mantenimientos, devuelve F
	
Excepciones
	cuando listaVacia => tieneMant <- F
FIN

