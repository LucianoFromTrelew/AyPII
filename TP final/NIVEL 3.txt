/*NIVEL 3*/

Procedimiento pedirDatosAltaModelo(E modelos: listaModelos, S k: entero, S info: infoModelos)
{Ingresa los datos para cargar un modelo nuevo
PRE: modelos = M
POS: info = I, k = K. 
I tiene la info correspondiente al modelo nuevo. 
K tiene el código de modelo
Excepciones: }

INICIO

	Mostrar ("Ingrese nombre del modelo")
	Ingresar (info.nomMod)
	k <- KAutoNum(modelos)		//Nivel 5
	crear (info.calendario)		//ADT LO

FIN



Procedimiento pedirDatosAltaEtapas(E modelos: listaModelos, S cod: entero, S kms: entero; S precio: real, S i: infoModelos)
{Ingresa y valida los datos a insertar en una etapa de mantenimiento
PRE: modelos = M
POS: cod = C, kms = K, precio = P, i = I
C es una clave válida de la lista modelos, 
K es un kilometraje válido
P es un precio válido
I es la info del modelo
Excepciones: salir}
VAR


INICIO
	pedirCod(cod, modelos, i)			//Nivel 4
	
	pedirKmsEtapaNueva(kms, i)			//Nivel 4
	
	pedirPrecio(precio, MIN_PRECIO)		//Nivel 4
FIN



Procedimiento pedirDatosAltaClientes(E clientes: arbolClientes, S DNI: entero, S i: infoClientes)
{Ingresa y valida los datos a insertar en un cliente nuevo
PRE: clientes = C
POS: DNI = D, i = I. 
D tiene un DNI válido de un cliente nuevo. 
I tiene la info correspondiente del cliente nuevo
Excepciones: salir}
VAR
	
INICIO
	pedirDNI(clientes, DNI)				//Nivel 4
	
	pedirNombre(i.nombre, i.apellido)	//Nivel 4
		
	pedirTel(i.tel)						//Nivel 4
	
	pedirEmail(i.email)					//Nivel 4
	
	crear(i.vehiculos)					//ADT LO
FIN





Procedimiento pedirDatosAltaVehiculos(S patente: cadena, S i: infoVehiculos, S l: infoClientes, E modelos: listaModelos, E clientes: arbolClientes, E vehiculos: arbolVehiculos)
{Ingresa y valida los datos para cargar un vehículo nuevo
PRE: modelos = M, clientes = C, vehiculos = V
POS: patente = P, i = I, l = L. 
P tiene una patente válida. 
I tiene la info del vehículo nuevo. 
L tiene la info del dueño del vehículo
Excepciones: salir}
VAR
	j: infoModelos;
INICIO

	pedirPatente(vehiculos, patente)			//Nivel 4
	
	pedirAño(i.año, MIN_AÑO) 					//Nivel 4
	//año de fabricación	
	
	pedirCod(i.mod, modelos, j)					//Nivel 4

	Crear (i.mantenimientos)					//ADT LO
	
	buscarDueño(clientes, l) 			//Nivel 4
	//Busca el dueño dentro del arbol de clientes.										
	

FIN


Procedimiento pedirDatosAltaServicio(E clientes: arbolClientes, E vehiculos: arbolVehiculos, E modelos: listaModelos, S pat: cadena, S j: infoListaMant, S etapa: entero, S lista: listaVehiculos)
{Ingresa y valida los datos de un servicio realizado en un vehiculo
PRE: clientes = C, vehiculos = V, modelos = M
POS: pat = P, lista = L, etapa = E
L tiene la lista de vehículos registrado del cliente. 
P tiene una patente válida.
E es una etapa válida para el modelo de vehículo.
Excepciones: salir}
VAR
	iClien: infoClientes
	iVehi: infoVehiculos
	

INICIO
	pedirDatosVehiculoExistente(vehiculos, pat, iVehi)
			
	ingresarEtapa(modelos, iVehi, j, etapa)					//Nivel 4
	//E modelos, E iVehi.mod, S j: infoListaMnat, S etapa: entero
	
	buscar(clientes, iVehi.dueño, iClien)
	lista <- iClien.vehiculos //le pasamos la lista de vehiculos del cliente ingresado
FIN















Procedimiento pedirDatosModeloExistente(E modelos: listaModelos, S cod: entero, S i: infoModelos)
{Ingresa un código existente al usuario
PRE: modelos = M
POS: cod = C, i = I. C es un código que existe en la lista de modelos. 
I es su info.
Excepciones: salir}
VAR
INICIO
	Si (no(esVacia(modelos)))		//ADT LO
		Mostrar("Si no desea continuar, ingrese 0")
		pedirCod(cod, modelos, i)			//Nivel 4
	Si no
		Mostrar("No hay ningún modelo cargado")
		lanzar salir
	Fin Si
FIN






Procedimiento pedirDatosEtapaExistente(E modelos: listaModelos, S cod, etapa: entero)
{Ingresa y valida una etapa de mantenimiento de un modelo
PRE: modelos = M
POS: cod = C, etapa = E. C es un código de modelo y E es una etapa de mantenimiento del modelo C
Excepciones: salir}

VAR
	i: infoModelos
	iEtapa: real
	
INICIO

	Si no(esVacia(modelos)) entonces	//ADT LO
		
		pedirCod(cod, modelos, i)						//Nivel 4
		Si no(esVacia(i.calendario)) entonces
			Mostrar("Si no desea continuar, ingrese 0")
			pedirEtapa(etapa, iEtapa, modelos, cod)	//Nivel 4
		Si no
			Mostrar("El modelo no tiene ninguna etapa de mantenimiento cargada")
			lanzar salir
		Fin Si
	Si no
		Mostrar("No hay ningún modelo cargado")
		lanzar salir
	Fin Si

FIN
		
	




	

Procedimiento pedirDatosClienteExistente(E clientes: arbolClientes, S DNI: entero, S i: infoClientes)
{Ingresa datos de un cliente a existente
PRE: clientes = C.
POS: DNI = D. D es el DNI de un cliente a eliminar
Excepciones: salir}

VAR
	OK: logico
	
INICIO
	Si no(esVacia(clientes))			//ADT ABB
		Repetir
			Mostrar("Ingrese el DNI del cliente existente")
			ingresar(DNI)
			INICIO
				buscar(clientes, DNI, i)	//ADT LO
				OK <- V
			Excepciones
				cuando claveNoExiste => OK <- ingresoIncorrecto("Cliente no existe")
											//Nivel 5
			FIN
		Hasta que (OK)
	Si no
		Mostrar ("No hay ningún cliente cargado")
		lanzar salir
FIN



Procedimiento pedirDatosVehiculoExistente(E vehiculos: arbolVehiculos, S pat: cadena, S i: infoVehiculos)
{Ingresa datos de un vehículo existente
PRE: vehiculos = V
POS: pat = P, i = I. P es una patente existente. I es su info
Excepciones: salir}

VAR
	OK: logico
INICIO

	Si no(esVacia(vehiculos)) entonces	//ADT ABB
		Repetir
			pat <- obtenerPatente()			//Nivel 5
			INICIO
				buscar(vehiculos, pat, i)	//ADT ABB
				OK <- V
			Excepciones
				cuando claveNoExiste => OK <- ingresoIncorrecto("Patente no existe")
											//Nivel 5
			FIN
		Hasta que OK
	Si no
		Mostrar("No hay ningún vehículo cargado")
		lanzar salir
	Fin Si
	
FIN





Procedimiento pedirDatosServicioExistente(E vehiculos: arbolVehiculos, E modelos: listaModelos, S pat: cadena, S info: infoVehiculos, S etapa: entero)
{Ingresa los datos de una etapa de mantenimiento existente
PRE: vehiculos = V, modelos = M
POS: pat = P, info = I, etapa = E.
P es la patente del vehículo a eliminar la etapa
I es su info.
E es la etapa de mantenimiento a eliminar
Excepciones: salir}

VAR
	i: infoListaMant
	iEtapa: real
	OK: logico
	
INICIO


	pedirDatosVehiculoExistente(vehiculos, pat, info)
	
	Si no(esVacia(info.mantenimientos)) entonces	//ADT LO
		Repetir
			pedirEtapa(etapa, iEtapa, modelos, info.mod)	//Nivel 4
			INICIO
				recuClave(info.mantenimientos, etapa, i)	//ADT LO
				OK <- V
			Excepciones
				cuando claveNoExiste => OK <- ingresoIncorrecto("Servicio de esa etapa no fue realizado")
											//Nivel 5
			FIN	
		Hasta que OK
	Si no
		Mostrar("No hay ningún servicio realizado sobre el vehículo")
		lanzar salir
	Fin Si
	
FIN




Procedimiento mostrarMantClientes(E vehiculos: arbolVehiculos, E i: infoClientes)
{Muestra los mantenimientos de los vehículos de un cliente
PRE: vehiculos = V, i = I. I es la info del cliente
POS: -
Excepciones: }

VAR
	pat: cadena
	OK, tieneMant: logico
	j: infoVehiculos
	
INICIO
	OK <- V
	recuPrim(i.vehiculos, pat)	//ADT LO
	Mostrar ("Matenimientos solicitados por el cliente ", i.nombre," ", i.apellido)
	
	Mientras OK hacer
		recuClave(i.vehiculos, pat, tieneMant)	//ADT LO
		Si (tieneMant) entonces //el vehículo de la lista tiene al menos un matenimiento realizad
			buscar(vehiculos, pat, j)				//ADT ABB
			mostrarMant(pat, j)					//Nivel 4
			//muestra el mantenimiento
		Fin Si
		INICIO
			recuSig(i.vehiculos, pat, pat)		//ADT LO
		Excepciones
			cuando claveEsUltima => OK <- F
		FIN
	Fin Mientras
	
Excepciones
	cuando listaVacia => Mostrar ("El cliente no solicitó ningún servicio")
FIN



Procedimiento pedirDatosModifModelos(E modelos: listaModelos, S cod: entero, S i: infoModelo)
{Ingresa los datos para modificar un modelo
PRE: modelos = M
POS: cod = C, i = I. C es el código del modelo a modificar. I es su info
Excepciones: salir}

INICIO

	pedirCod(mod, modelos, i)	//Nivel 4

	Mostrar ("Ingrese el nuevo nombre del modelo")
	Ingresar(info.nomMod)

FIN


Procedimiento pedirDatosModifEtapas (E modelos: listaModelos, S etapa: entero, S iEtapa: real, S info: infoModelos)
{Ingresa los datos para modificar una etapa de mantenimiento de un modelo
PRE: modelos = M
POS: etapa = E, iEtapa = I, i = M.
E es la etapa de modificar.
I es la info de la etapa (precio base)
M es la info del modelo.
Excepciones: salir}
VAR
	cod: entero
INICIO
	pedirCod(cod, modelos, i)				//Nivel 4
	//se obtiene el modelo para modifiacar sus etapas
	
	Si no(esVacia(i.calendario)) entonces	//ADT LO
	
		pedirEtapa(etapa, iEtapa, modelos, mod)	//Nivel 4
		pedirPrecio(iEtapa, MIN_PRECIO)			//Nivel 4
		
	Si no 	
		Mostrar("El modelo de código ", mod," no tiene etapas de mantenimientos cargadas")
		lanzar salir
	FinSi
	
FIN


Procedimiento pedirDatosModifClientes(E clientes: arbolClientes, S i: infoClientes, S salida: logico)
{Ingresa los datos para modificar un cliente
PRE: clientes = C
POS: i = I, salida = S. 
I es la info nueva del cliente a modificar
S un valor de salida
Excepciones: salir}

VAR

	opc: entero
	
INICIO
	salida <- F
	menuModifCliente()									//Nivel 4
	opc <- enteroEnRango("Ingrese su opción", 1, 4)
	
	Segun opc hacer
		1: pedirNombre(i.nombre, i.apellido)	//Nivel 4
		
		2: pedirTel(i.tel)							//Nivel 4
		
		3: pedirEmail(i.email)						//Nivel 4
				
		4: salida <- V	
	FinSegun
FIN


Procedimiento pedirDatosModifVehiculos(E clientes: arbolClientes, E modelos: listaModelos, E/S datos: infoVehiculos, E/S pat: cadena, S salida: logico)
{Ingresa los datos para modificar un vehículo
PRE: clientes = C, modelos = M, datos = D, pat = P.
POS: datos = D1, salida = S.
D1 es la info nueva del vehículo
S es un valor de salida
Excepciones: salir}

VAR
	j: infoModelos
	opc: entero

INICIO	
	
	salida <- F
	menuModifVehiculo()						//Nivel 4
	opc <- enteroEnRango("Ingrese su opción", 1, 5)
	
	Segun sea opc hacer	
		1: pat <- obtenerPatente()			 //Nivel 5
		2: pedirAño(datos.año, MIN_AÑO)	 //Nivel 4
		3: pedirCod(datos.mod, modelos, j)	 //Nivel 4
		4: cambioDueño(clientes, pat, datos) //Nivel 4
		5: salida <- verdadero
	Fin
	
	



Procedimiento pedirDatosModifServicio(E modelos: listaModelos, S etapa: entero, E cod: entero S i: infoListaMant, S salida: logico)
{Ingresa los datos para modificar un servicio realizado
PRE: modelos = M, cod = C
POS: etapa = E, i = I, salida = S.
E es la etapa de mantenimiento a modificar
I es la info nueva
S es un valor de salida
Excepciones: salir}

VAR
	opc: entero
	iEtapa: real

INICIO
	salida <- F
	menuModifServicio()								//Nivel 4
	opc <- enteroEnRango("Ingrese su opción", 1, 6)
		
	segun opc hacer 
		1: pedirEtapa(etapa, iEtapa, modelos, cod)	//Nivel 4
		2: pedirKmsReal(i.kmReal, MIN_KMS)			//Nivel 4
		3: i.fecha <- obtenerFecha()				//Nivel 5
		4: pedirObs(i.obs)							//Nivel 4
		5: pedirPrecio(i.precio, MIN_PRECIO)		//Nivel 4
		6: salida <- V
	FinSegun
	
FIN





Procedimiento mostrarMantModelo(E vehiculos: arbolVehiculos, E cod: entero)
{Muestra los mantenimientos de los vehículos de un modelo
PRE: vehiculos = V, cod = C
POS: -
Excepciones: salir }

VAR
	qVehiculos: colaVehiculos
	pat: cadena
	i: infoVehiculos	

INICIO
	crear(qVehiculos)				//ADT Cola
	inOrder(vehiculos, qVehiculos)	//ADT ABB
	
	Mostrar("Matenimientos realizados sobre el modelo de código ", cod)
	
	Mientras no(esVacia(qVehiculos)) hacer	//ADT Cola
		frente(qVehiculos, pat)				//ADT Cola
		desencolar(qVehiculos)				//ADT Cola
		
		buscar(vehiculos, pat, i)			//ADT ABB
			
		Si (i.mod = cod) entonces
			mostrarMant(pat, i)				//Nivel 4
		Fin Si
		
	Fin Mientras
	
Excepciones
	cuando errorEnCola => lanzar salir
FIN




Procedimiento conseguirClientesSinMant(E clientes, S q: colaClientes)
{Devuelve en una cola los clientes que no haya solicitado mantenimiento en alguno de sus vehículos registrados
PRE: clientes = C
POS: q = Q. Q tiene los DNI de los clientes que no solicitaron al menos un mantenimiento en alguno de sus vehículos
Excepciones: salir}

VAR
	qAux: colaClientes
	DNI: entero
	i: infoClientes
	
INICIO
	crear(qAux)							//ADT Cola
	crear(q)							//ADT Cola
	
	inOrder(clientes, qAux)				//ADT ABB
			
	Mientras no(esVacia(qAux)) hacer	//ADT Cola
		frente(qAux, DNI)					//ADT Cola
		desencolar(qAux)					//ADT Cola
		
		buscar(clientes, DNI, i)			//ADT ABB
		
		Si no(tieneMant(i)) entonces	//Nivel 4
			encolar(q, DNI)						//ADT Cola
		Fin Si
	Fin Mientras
	
Excepciones
	cuando errorEnCola => lanzar salir
FIN


Procedimiento mostrarDatosClientes(E clientes, E q: colaClientes)
{Muestra los datos de los clientes de la cola
PRE: clientes = C, q = Q. Q tiene los DNI de los clientes a mostrar
POS: -
Excepciones: }

VAR
	DNI: entero
	i: infoClientes
INICIO

	Mientras no(esVacia(q)) hacer	//ADT Cola
		frente(q, DNI)				//ADT Cola
		desencolar(q)				//ADT Cola
		
		buscar(clientes, q, i)		//ADT ABB
		mostrar("Nombre: ", i.nombre)
		mostrar("Apellido: ", i.apellido)
		mostrar("Teléfono: ", i.tel)
		mostrar("E-Mail: ", i.email)
		
	Fin Mientras
	
FIN
	
		
		
		
	
	


