/*NIVEL 2*/


Procedimiento mostrarMenuABM()
{Muestra menú de Altas, Bajas y Modificaciones
PRE: -
POS: -
Excepciones: -}

INICIO
	CLS
	mostrar("1. Modelos")
	mostrar("2. Etapas")
	mostrar("3. Clientes")
	mostrar("4. Vehículos de un cliente")
	mostrar("5. Servicios realizados sobre un vehículo")
	mostrar("6. Salir")
FIN


Procedimiento mostrarMenuConsultas()
{Muestra menú de Consultas
PRE: -
POS: -
Excepciones: -}

INICIO
	CLS
	mostrar("1. Mantenimientos de un cliente")
	mostrar("2. Mantenimientos por modelo")
	mostrar("3. Datos de clientes sin mantenimientos realizados")
	mostrar("4. Salir")
FIN





Procedimiento altaModelo (E/S modelos: listaModelos)
{QH: Añade un nuevo modelo.
PRE: modelos = M
POST: modelos = M' y M' tiene un nuevo modelo.
Excepciones: -}

VAR
	i: infoModelos		//tipo Info de MODELOS
	k: entero			//tipo clave de MODELOS
	
INICIO

	pedirDatosAltaModelo(modelos, k, i) 	//Nivel 3
	
	insertar(modelos, k, i)		//ADT LO
	
	
Excepciones
	cuando listaLlena => Mostrar ("Error al ingresar modelo nuevo")
	
FIN




Procedimiento altaEtapas(E/S modelos: listaModelos)
{Agrega una etapa de mantenimiento en el calendario de un modelo
PRE: modelos = M
POS: modelos = M1, el nodo i de M1 tiene una etapa de mantenimiento nueva
Excepciones:		}
VAR
	cod: entero
	kms: tipoClaveCalendario
	precio: entero
	i: infoModelos
	
INICIO

	pedirDatosAltaEtapas(modelos, cod, kms, precio, i) //Nivel 3
	recuClave(modelos, cod, i)	
	insertar(i.calendario, kms, precio)	   	  //ADT LO
	
	suprimir(modelos, cod)
	insertar(modelos, cod, i)

		
FIN
	
Excepciones
	cuando listaLlena => mostrar ("No se pudo insertar la nueva etapa en el modelo ", i.nomMod)
	
FIN




Procedimiento altaClientes(E/S clientes: arbolClientes)
{Ingresa un cliente nuevo
PRE: clientes = C
POS: clientes = C1, C1 tiene un cliente nuevo
Excepciones:		}
VAR
	DNI: tipoClaveClientes
	i: infoClientes
	
INICIO

	pedirDatosAltaClientes(clientes, DNI, i)	//Nivel 3
	
	insertar(clientes, DNI, i)					//ADT ABB
	
Excepciones
	cuando arbolLleno => mostrar("No se pudo ingresar el cliente nuevo")
FIN




Procedimiento altaVehiculos (E/S vehiculos: arbolVehiculos, E/S clientes: arbolClientes, E modelos: listaModelos)
{QH: Ingresa un nuevo vehículo y lo asocia con su dueño
PRE: vehiculos = V, modelos = M, clientes = C
POST: vehiculos = V1. V1 tiene un nuevo vehículo. La lista del nodo de C que corresponde al cliente ingresado tiene un elemento nuevo
EXC: }

VAR
	patente: tipoClaveAuto
	iVehi: infoVehiculos 		
	iClien: infoClientes				
	
	
INICIO

	pedirDatosAltaVehiculos(patente, i, iClien, modelos, clientes, vehiculos)	//Nivel 3
	
	Insertar(vehiculos, patente, iVehi)				//ADT ABB
	
	insertar(iClien.vehiculos, patente, F)			//ADT LO
	
	//Agrega un nuevo vehículo a lista lista de vehículos del cliente
	//(Sin servicios realizados)
	
	modificar(clientes, iVehi.dueño, iClien)
	
		

Excepciones
	Cuando arbolLleno, listaLlena => Mostrar ("Error al ingresar vehículo nuevo")
	
FIN




Procedimiento altaServicios(E/S clientes: arbolClientes, E/S vehiculos: arbolVehiculos, E modelos: listaModelos)
{Ingresa un servicio nuevo a un vehículo
PRE: clientes = C, vehiculos = V, modelos = M
POS: clientes = C1, vehiculos = V1.
La lista de mantenimiento del vehículo ingresado de V1 tiene un nodo nuevo.
El nodo correspondiente al vehículo ingresado en la lista de vehículos del cliente ingresado indica que se le realizó un servicio
Excepciones:		}
VAR
	pat: tipoClaveAuto
	infoVehi: infoVehiculos
	infoMant: infoListaMant
	etapa: tipoClaveCalendario
	iClien: infoCliente
	tieneMant: logico
	
INICIO
	pedirDatosAltaServicio(clientes, vehiculos, modelos, pat, infoVehi, infoMant, etapa, iClien)		//Nivel 3				
										
	insertar(infoVehi.mantenimientos, etapa, infoMant)	//ADT LO
	
	modificar(vehiculos, pat, infoVehi)			//ADT ABB
	
	//ahora buscamos el vehiculo en la lista de vehiculos del dueño
	recuClave(iClien.vehiculos, pat, tieneMant)
	
	Si no(tieneMant) entonces
		suprimir(iClien.vehiculos, pat)				//ADT LO
		insertar(iClien.vehiculos, pat, V)				//ADT LO
		modificar(clientes, infoVehi.dueño, iClien)
	Fin Si
	
	//Si el vehículo no tiene servicios registrados (tieneMant = F)
	//Se indica que tiene por lo menos uno
	
Excepciones
	cuando listaLlena => Mostrar ("No se pudo agregar el servicio de la etapa de ", etapa," kms al vehículo de patente ", pat)
	cuando claveExiste => Mostrar ("Servicio ya existe")
FIN	















Procedimiento bajaModelo(E/S modelos: listaModelos, E/S clientes: arbolClientes, E/S vehiculos: arbolVehiculos)
{Elimina un modelo registrado
PRE: modelos = M, clientes = C, vehiculos = V
POS: modelos = M1, clientes = C1, vehiculos = V1.
M1 tiene un elemento menos
Las listas de los clientes de C1 no tienen vehículos del modelo ingresado.
V1 no tiene vehículos del modelo ingresado
Excepciones:	}

VAR
	cod: entero
	i: infoModelos

INICIO
	Mostrar("Se eliminarán todos los vehículos registrados de ese modelo")
	pedirDatosModeloExistente(modelos, cod, i)		//Nivel 3
	//E modelos, S cod, S i.
		
	eliminaVehiculosModelo(clientes, vehiculos, cod)	//Nivel 4
	
	vaciar(i.calendario)		//ADT LO
	suprimir(modelos, cod)		//ADT LO
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
	
FIN




Procedimiento bajaEtapas (E/S modelos: listaModelos, E/S vehiculos: arbolVehiculos)
{Elimina una etapa de mantenimiento del calendario de un modelo
PRE: modelos = M
POS: modelos = M1. La lista de calendario correspondiente al código de modelo ingresado tiene un elemento menos
Excepciones:		}

VAR
	cod: entero
	etapa: tipoClaveCalendario
	i: infoModelos
	
INICIO
	Mostrar("Se eliminarán todos los servicios de la etapa que se ingrese.")
	
	pedirDatosEtapaExistente(modelos, cod, etapa)		//Nivel 3
	//E modelos, S cod, etapa
	
	eliminarServiciosEtapa(vehiculos, cod, etapa)		//Nivel 4
	
	
	recuClave(modelos, cod, i)			//ADT LO
	
	suprimir(i.calendario, etapa)		//ADT LO
	
FIN




Procedimiento bajaClientes (E/S clientes: arbolClientes, E/S vehiculos: arbolVehiculos)
{Elimina un cliente
PRE: clientes = C, vehiculos = V
POS: clientes = C1, vehiculos = V1. C1 no tiene el cliente ingresado por el usuario. V1 no tiene los vehículos registrados a nombre del cliente ingresado por el usuario
Excepciones:		}

VAR
	DNI: tipoClaveClientes
	i: infoClientes
INICIO
	
	pedirDNIexistente(clientes, DNI, i)	//Nivel 3
	//E clientes, S DNI, S i
	
	vaciarListaVehiculos(i.vehiculos, vehiculos)	//Nivel 4
	
	suprimir(clientes, DNI)		//ADT ABB
	
	
FIN




Procedimiento bajaVehiculos(E/S clientes: arbolClientes, E/S vehiculos: arbolVehiculos)
{Elimina un vehículo
PRE: clientes = C, vehiculos = V
POS: clientes = C1, vehiculos = V1.
V1 no tiene el vehículo ingresado por el usuario.
La lista de vehículos del cliente registrado en C1 no tiene
el vehículos ingresado por el usuario
Excepciones:		}

VAR
	pat: tipoClaveAuto
	iVehi: infoVehiculos
	iClien: infoClientes
	
INICIO
	
	pedirPatenteExistente(vehiculos, pat, iVehi)		//Nivel 3
	//E vehiculos, S pat, S i
		
	buscar(clientes, iVehi.dueño, iClien)		//ADT LO
	suprimir(j.vehiculos, pat)			//ADT LO
	
	//Primero lo elimina de la lista de vehiculos del //cliente y después del arbol
	
	vaciar(iVehi.mantenimientos)		//ADT LO
	suprimir(vehiculos, pat)		//ADT ABB
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
FIN




Procedimiento bajaServicios(E/S vehiculos: arbolVehiculos, E/S clientes: arbolClientes, E modelos: listaModelos)
{Elimina un servicio realizado de un vehículo registrado
PRE: vehiculos = V
POS: vehiculos = V1.
A la lista de mantenimientos del vehiculos ingresado por el usuario le falta un elemento
Excepciones:		}

VAR
	pat: tipoClaveAuto
	iVehi: infoVehiculos
	etapa: tipoClaveCalendario
	iClien: infoClientes
INICIO

	pedirDatosServicioExistente(vehiculos, modelos, pat, iVehi, etapa)	//Nivel 3
	//E vehiculos, S pat, S i, S etapa	
	
	suprimir(iVehi.mantenimientos, etapa)		//ADT LO
	
	
	Si esVacia(iVehi.mantenimientos) entonces
		buscar(clientes, iVehi.dueño, iClien)		//ADT ABB
		suprimir(iClien.vehiculos, pat)			//ADT LO
		insertar(iClien.vehiculos, pat, F)		//ADT LO
		modificar(clientes, iVehi.dueño, iClien)		//ADT ABB
	Fin Si
	
	//Si el vehículo no tiene mantenimientos registrados,
	//lo indicamos en la info de la lista de vehículos
	//de su dueño
	
	modificar(vehiculos, pat, iVehi)
		

	
FIN
	
	
	

Procedimiento modModelo (E/S modelos: listaModelos)
{Modifica los datos de un modelo.
PRE: modelos = M
POST: modelos = M' y M' tiene un nodo modificado}
Excepciones: }

VAR
	mod: entero
	info: infoModelo

INICIO

	pedirDatosModifModelos(modelos, mod, info)		//Nivel 3
	//Pedimos info nueva de un modelo existente
	
	
	suprimir(modelos, mod)			//ADT LO
	//se elimina el modelo de la lista, y se vuelve a insertar, 
	//con solo el nombre modificado 
	Insertar(modelos, mod, info)	//ADT LO

	
FIN




Procedimiento modEtapas(E/S modelos: listaModelos)
{Modifica una etapa de mantenimiento de un modelo. 
PRE: modelos = M
POST: modelos = M' y el modelo x (ingresado por el usuario) de M' tiene modificado su calentario de etapas
Excepciones: }

VAR
	kEtapa: tipoClaveCalendario
	pEtapa: entero
	i: infoModelos
	
INICIO

	pedirDatosModifEtapas(modelos, kEtapa, pEtapa, i)		//Nivel 3
	//pedimos info nueva de una etapa de mantenimiento existente
	//de un modelo existente
	
	suprimir(i.calendario, kEtapa)				//ADT LO		
	//se elimina el nodo de mantenimiento, 
	//y se piden los nuevos datos 
	
	Insertar(i.calendario, kEtapa, pEtapa)		//ADT LO

	
FIN




Procedimiento modClientes(E/S clientes: arbolClientes)
{Modifca los datos de un cliente
PRE: clientes = C 
POST: clientes = C' y C' tiene un cliente modificado
Excepciones: }

VAR	
	DNI: tipoClaveClientes	
	infoC: infoClientes
	salida: logico

INICIO

	pedirDNIexistente(clientes, DNI, infoC)		//Nivel 3
	//pedimos DNI de un cliente existente
	
	Repetir
	
		pedirDatosModifClientes(clientes, infoC, salida)	//Nivel 3
		//pedimos info nueva de un cliente existente
		
		
		modificar(clientes, DNI, infoC)		//ADT ABB
		
	hasta salida
	

FIN




Procedimiento modVehiculos(E/S vehiculos: arbolVehiculos, E clientes: arbolClientes, E modelos: listaModelos)
{Modifica los datos de un vehiculo 
PRE: vehiculos = V, clientes = C, modelos = M.
POST: vehiculos = V' y V' tiene un nodo modificado
Excepciones: }
VAR
	auto: tipoClaveAuto
	datos: infoVehiculos
	salida: logico
	
INICIO

	pedirPatenteExistente(vehiculos, auto, datos)				//Nivel 3
	//pedimos patente de un vehículo existente
	
	repetir
	
		pedirDatosModifVehiculos(clientes, modelos, datos, auto, salida)	//Nivel 3
		//pedimos info nueva de un vehículo existente

		modificar(vehiculos, auto, datos)	//ADT ABB
		
	hasta que salida
	

FIN



	
Procedimiento modServicios(E/S vehiculos: arbolVehiculos, E modelos: listaModelos)
{Modifica los servicios realizados sobre un vehiculo
PRE: vehiculos = V, modelos = M
POST: vehiculos = V', y V' tiene un servicio modificado}
Excepciones: }

VAR	
	salida: logico
	info: infoVehiculos
	pat: tipoClaveAuto
	etapa: tipoClaveCalendario
	iServicio: infoListaMant
	
	
INICIO
	pedirDatosServicioExistente(vehiculos, modelos, pat, info, etapa)						//Nivel 3
	//pedimos el servicio realizado sobre un vehículo
	
	
	repetir 
	
		pedirDatosModifServicio(modelos, etapa, info.mod, iServicio, salida)		//Nivel 3
		
		suprimir(info.mantenimientos, etapa)					//ADT LO
		Insertar(info.mantenimientos, etapa, iServicio)		//ADT LO
	
		modificar(vehiculos, pat, info)
			
		
	hasta salida
	
FIN

	
	
	
	
	
	
	
Procedimiento mantXCliente(E clientes: arbolClientes, E vehiculos: arbolVehiculos)
{Muestra los mantenimientos que solicitó un cliente ingresado por usuario
PRE: clientes = C, vehiculos = V
POS: -
Excepciones:	}

VAR
	DNI: tipoClaveClientes
	i: infoClientes
INICIO

	pedirDNIexistente(clientes, DNI, i)		//Nivel 3
	//E clientes, S DNI, S i
	
	mostrarMantClientes(vehiculos, i)					//Nivel 3
	
	//en i está la lista de vehículos. Nos fijamos si
	//cada vehículo tiene al menos un mant
	//(info de la lista de mant), y lo mostramos


FIN




Procedimiento mantXMod(E modelos: listaModelos, E vehiculos: arbolVehiculos)
{Muestra los mantenimientos de un modelo ingresado por el usuario
PRE: modelos = M, vehiculos = V
POS: -
Excepciones:	}

VAR
	cod: entero
	i: infoModelos
INICIO

	pedirDatosModeloExistente(modelos, cod, i)		//Nivel 3
	//E modelos, S cod, S i.
	
	
	mostrarMantModelo(vehiculos, cod, i)				//Nivel 3
	
	//buscamos en el ABB los vehículos del modelo ingresado
	//y mostramos sus mantenimientos
	
	
Excepciones
	cuando salir => mostrar ("No se completó la operación")
FIN




Procedimiento datosClientes(E clientes: arbolClientes)
{Muestra los datos de los clientes que no han realizado mantenimientos en alguno de sus vehículos registrados
PRE: clientes = C
POS: -
Excepciones:		}

VAR
	qClientes: colaClientes
INICIO
	
	conseguirClientesSinMant(clientes, qClientes)			//Nivel 3
	//E clientes, S qClientes
	
	Mostrar("Clientes que no registraron ningún mantenimiento en alguno de sus vehículos registrados: ")
	
	mostrarDatosClientes(clientes, qClientes)				//Nivel 3
	////E clientes, E qClientes
	
FIN



	
	